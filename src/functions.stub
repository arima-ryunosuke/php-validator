<?php
# Don't touch this code. This is auto generated.
namespace ryunosuke\chmonos;

if (!defined('ryunosuke\\chmonos\\IS_OWNSELF')) {
    define('ryunosuke\\chmonos\\IS_OWNSELF', 2);
}

if (!defined('ryunosuke\\chmonos\\IS_PUBLIC')) {
    define('ryunosuke\\chmonos\\IS_PUBLIC', 4);
}

if (!defined('ryunosuke\\chmonos\\IS_PROTECTED')) {
    define('ryunosuke\\chmonos\\IS_PROTECTED', 8);
}

if (!defined('ryunosuke\\chmonos\\IS_PRIVATE')) {
    define('ryunosuke\\chmonos\\IS_PRIVATE', 16);
}

if (!defined('ryunosuke\\chmonos\\EN_MONTH_SHORT')) {
    define('ryunosuke\\chmonos\\EN_MONTH_SHORT', [
        1  => "jan",
        2  => "feb",
        3  => "mar",
        4  => "apr",
        5  => "may",
        6  => "jun",
        7  => "jul",
        8  => "aug",
        9  => "sep",
        10 => "oct",
        11 => "nov",
        12 => "dec",
    ]);
}

if (!defined('ryunosuke\\chmonos\\EN_MONTH_LONG')) {
    define('ryunosuke\\chmonos\\EN_MONTH_LONG', [
        1  => "january",
        2  => "february",
        3  => "march",
        4  => "april",
        5  => "may",
        6  => "june",
        7  => "july",
        8  => "august",
        9  => "september",
        10 => "october",
        11 => "november",
        12 => "december",
    ]);
}

if (!defined('ryunosuke\\chmonos\\JP_ERA')) {
    define('ryunosuke\\chmonos\\JP_ERA', [
        [
            "name"  => "令和",
            "abbr"  => "R",
            "since" => 1556636400,
        ],
        [
            "name"  => "平成",
            "abbr"  => "H",
            "since" => 600188400,
        ],
        [
            "name"  => "昭和",
            "abbr"  => "S",
            "since" => -1357635600,
        ],
        [
            "name"  => "大正",
            "abbr"  => "T",
            "since" => -1812186000,
        ],
        [
            "name"  => "明治",
            "abbr"  => "M",
            "since" => -3216790800,
        ],
    ]);
}

if (!defined('ryunosuke\\chmonos\\GENERAL_MIMETYPE')) {
    define('ryunosuke\\chmonos\\GENERAL_MIMETYPE', [
        "csv"   => "text/csv",
        "dcm"   => "application/dicom",
        "dvc"   => "application/dvcs",
        "finf"  => "application/fastinfoset",
        "stk"   => "application/hyperstudio",
        "ipfix" => "application/ipfix",
        "json"  => "application/json",
        "mrc"   => "application/marc",
        "nb"    => "application/mathematica",
        "ma"    => "application/mathematica",
        "mb"    => "application/mathematica",
        "mbox"  => "application/mbox",
        "m21"   => "application/mp21",
        "mp21"  => "application/mp21",
        "xls"   => "application/vnd.ms-excel",
        "doc"   => "application/vnd.ms-word",
        "mxf"   => "application/mxf",
        "oda"   => "application/oda",
        "ogx"   => "application/ogg",
        "pdf"   => "application/pdf",
        "p10"   => "application/pkcs10",
        "ai"    => "application/postscript",
        "eps"   => "application/postscript",
        "ps"    => "application/postscript",
        "rtf"   => "application/rtf",
        "sdp"   => "application/sdp",
        "siv"   => "application/sieve",
        "sieve" => "application/sieve",
        "smil"  => "application/smil",
        "smi"   => "application/smil",
        "sml"   => "application/smil",
        "gram"  => "application/srgs",
        "xml"   => "text/xml",
        "zip"   => "application/x-zip-compressed",
        "xlsx"  => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "docx"  => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        726     => "audio/32kadpcm",
        "amr"   => "audio/AMR",
        "at3"   => "audio/ATRAC3",
        "aa3"   => "audio/ATRAC3",
        "omg"   => "audio/ATRAC3",
        "evc"   => "audio/EVRC",
        "evb"   => "audio/EVRCB",
        "evw"   => "audio/EVRCWB",
        "l16"   => "audio/L16",
        "smv"   => "audio/SMV",
        "ac3"   => "audio/ac3",
        "au"    => "audio/basic",
        "snd"   => "audio/basic",
        "dls"   => "audio/dls",
        "lbc"   => "audio/iLBC",
        "mid"   => "audio/midi",
        "midi"  => "audio/midi",
        "kar"   => "audio/midi",
        "mpga"  => "audio/mpeg",
        "mp1"   => "audio/mpeg",
        "mp2"   => "audio/mpeg",
        "mp3"   => "audio/mpeg",
        "oga"   => "audio/ogg",
        "ogg"   => "audio/ogg",
        "spx"   => "audio/ogg",
        "qcp"   => "audio/qcelp",
        "bmp"   => "image/bmp",
        "fits"  => "image/fits",
        "fit"   => "image/fits",
        "fts"   => "image/fits",
        "gif"   => "image/gif",
        "ief"   => "image/ief",
        "jp2"   => "image/jp2",
        "jpg2"  => "image/jp2",
        "jpeg"  => "image/jpeg",
        "jpg"   => "image/jpeg",
        "jpe"   => "image/jpeg",
        "jfif"  => "image/jpeg",
        "jpm"   => "image/jpm",
        "jpgm"  => "image/jpm",
        "jpx"   => "image/jpx",
        "jpf"   => "image/jpx",
        "svg"   => "image/svg+xml",
        "png"   => "image/png",
        "t38"   => "image/t38",
        "tiff"  => "image/tiff",
        "tif"   => "image/tiff",
        "u8msg" => "message/global",
        "eml"   => "message/rfc822",
        "mail"  => "message/rfc822",
        "art"   => "message/rfc822",
        "igs"   => "model/iges",
        "iges"  => "model/iges",
        "msh"   => "model/mesh",
        "mesh"  => "model/mesh",
        "silo"  => "model/mesh",
        "wrl"   => "model/vrml",
        "vrml"  => "model/vrml",
        "ics"   => "text/calendar",
        "ifb"   => "text/calendar",
        "css"   => "text/css",
        "soa"   => "text/dns",
        "zone"  => "text/dns",
        "html"  => "text/html",
        "htm"   => "text/html",
        "js"    => "text/javascript",
        "asc"   => "text/plain",
        "txt"   => "text/plain",
        "text"  => "text/plain",
        "pm"    => "text/plain",
        "el"    => "text/plain",
        "c"     => "text/plain",
        "h"     => "text/plain",
        "cc"    => "text/plain",
        "hh"    => "text/plain",
        "cxx"   => "text/plain",
        "hxx"   => "text/plain",
        "f90"   => "text/plain",
        "rtx"   => "text/richtext",
        "sgml"  => "text/sgml",
        "sgm"   => "text/sgml",
        "3gp"   => "video/3gpp",
        "3gpp"  => "video/3gpp",
        "3g2"   => "video/3gpp2",
        "3gpp2" => "video/3gpp2",
        "mj2"   => "video/mj2",
        "mjp2"  => "video/mj2",
        "mp4"   => "video/mp4",
        "mpg4"  => "video/mp4",
        "mpeg"  => "video/mpeg",
        "mpg"   => "video/mpeg",
        "mpe"   => "video/mpeg",
        "ogv"   => "video/ogg",
        "qt"    => "video/quicktime",
        "mov"   => "video/quicktime",
        "webm"  => "video/webm",
    ]);
}

if (!defined('ryunosuke\\chmonos\\GLOB_RECURSIVE')) {
    define('ryunosuke\\chmonos\\GLOB_RECURSIVE', 65536);
}

if (!defined('ryunosuke\\chmonos\\JSON_MAX_DEPTH')) {
    define('ryunosuke\\chmonos\\JSON_MAX_DEPTH', -1);
}

if (!defined('ryunosuke\\chmonos\\JSON_INDENT')) {
    define('ryunosuke\\chmonos\\JSON_INDENT', -71);
}

if (!defined('ryunosuke\\chmonos\\JSON_CLOSURE')) {
    define('ryunosuke\\chmonos\\JSON_CLOSURE', -72);
}

if (!defined('ryunosuke\\chmonos\\JSON_NEST_LEVEL')) {
    define('ryunosuke\\chmonos\\JSON_NEST_LEVEL', -73);
}

if (!defined('ryunosuke\\chmonos\\JSON_INLINE_LEVEL')) {
    define('ryunosuke\\chmonos\\JSON_INLINE_LEVEL', -74);
}

if (!defined('ryunosuke\\chmonos\\JSON_INLINE_SCALARLIST')) {
    define('ryunosuke\\chmonos\\JSON_INLINE_SCALARLIST', -75);
}

if (!defined('ryunosuke\\chmonos\\JSON_ES5')) {
    define('ryunosuke\\chmonos\\JSON_ES5', -100);
}

if (!defined('ryunosuke\\chmonos\\JSON_INT_AS_STRING')) {
    define('ryunosuke\\chmonos\\JSON_INT_AS_STRING', -101);
}

if (!defined('ryunosuke\\chmonos\\JSON_FLOAT_AS_STRING')) {
    define('ryunosuke\\chmonos\\JSON_FLOAT_AS_STRING', -102);
}

if (!defined('ryunosuke\\chmonos\\JSON_TRAILING_COMMA')) {
    define('ryunosuke\\chmonos\\JSON_TRAILING_COMMA', -103);
}

if (!defined('ryunosuke\\chmonos\\JSON_COMMENT_PREFIX')) {
    define('ryunosuke\\chmonos\\JSON_COMMENT_PREFIX', -104);
}

if (!defined('ryunosuke\\chmonos\\JSON_TEMPLATE_LITERAL')) {
    define('ryunosuke\\chmonos\\JSON_TEMPLATE_LITERAL', -105);
}

if (!defined('ryunosuke\\chmonos\\JSON_BARE_AS_STRING')) {
    define('ryunosuke\\chmonos\\JSON_BARE_AS_STRING', -106);
}

if (!defined('ryunosuke\\chmonos\\JSON_OBJECT_HANDLER')) {
    define('ryunosuke\\chmonos\\JSON_OBJECT_HANDLER', -107);
}

if (!defined('ryunosuke\\chmonos\\SI_UNITS')) {
    define('ryunosuke\\chmonos\\SI_UNITS', [
        -8 => ["y"],
        -7 => ["z"],
        -6 => ["a"],
        -5 => ["f"],
        -4 => ["p"],
        -3 => ["n"],
        -2 => ["u", "μ", "µ"],
        -1 => ["m"],
        0  => [],
        1  => ["k", "K"],
        2  => ["M"],
        3  => ["G"],
        4  => ["T"],
        5  => ["P"],
        6  => ["E"],
        7  => ["Z"],
        8  => ["Y"],
    ]);
}

if (!defined('ryunosuke\\chmonos\\SORT_STRICT')) {
    define('ryunosuke\\chmonos\\SORT_STRICT', 256);
}

assert(!function_exists('ryunosuke\\chmonos\\array_and') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_and'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_and')) {
    /**
     * 全要素が true になるなら true を返す（1つでも false なら false を返す）
     *
     * $callback が要求するならキーも渡ってくる。
     *
     * Example:
     * ```php
     * that(array_and([true, true]))->isTrue();
     * that(array_and([true, false]))->isFalse();
     * that(array_and([false, false]))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param ?callable $callback 評価クロージャ。 null なら値そのもので評価
     * @param bool|mixed $default 空配列の場合のデフォルト値
     * @return bool 全要素が true なら true
     */
    function array_and($array, $callback = null, $default = true)
    {
        if (is_empty($array)) {
            return $default;
        }

        $callback = func_user_func_array($callback);

        $n = 0;
        foreach ($array as $k => $v) {
            if (!$callback($v, $k, $n++)) {
                return false;
            }
        }
        return true;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_depth') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_depth'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_depth')) {
    /**
     * 配列の次元数を返す
     *
     * フラット配列は 1 と定義する。
     * つまり、配列を与える限りは 0 以下を返すことはない。
     *
     * 第2引数 $max_depth を与えるとその階層になった時点で走査を打ち切る。
     * 「1階層のみか？」などを調べるときは指定したほうが高速に動作する。
     *
     * Example:
     * ```php
     * that(array_depth([]))->isSame(1);
     * that(array_depth(['hoge']))->isSame(1);
     * that(array_depth([['nest1' => ['nest2']]]))->isSame(3);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array $array 調べる配列
     * @param int|null $max_depth 最大階層数
     * @return int 次元数。素のフラット配列は 1
     */
    function array_depth($array, $max_depth = null)
    {
        assert((is_null($max_depth)) || $max_depth > 0);

        $main = function ($array, $depth) use (&$main, $max_depth) {
            // $max_depth を超えているなら打ち切る
            if ($max_depth !== null && $depth >= $max_depth) {
                return 1;
            }

            // 配列以外に興味はない
            $arrays = array_filter($array, 'is_array');

            // ネストしない配列は 1 と定義
            if (!$arrays) {
                return 1;
            }

            // 配下の内で最大を返す
            return 1 + max(array_map(fn($v) => $main($v, $depth + 1), $arrays));
        };

        return $main($array, 1);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_dive') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_dive'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_dive')) {
    /**
     * パス形式で配列値を取得
     *
     * 存在しない場合は $default を返す。
     *
     * Example:
     * ```php
     * $array = [
     *     'a' => [
     *         'b' => [
     *             'c' => 'vvv'
     *         ]
     *     ]
     * ];
     * that(array_dive($array, 'a.b.c'))->isSame('vvv');
     * that(array_dive($array, 'a.b.x', 9))->isSame(9);
     * // 配列を与えても良い。その場合 $delimiter 引数は意味をなさない
     * that(array_dive($array, ['a', 'b', 'c']))->isSame('vvv');
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array|\ArrayAccess $array 調べる配列
     * @param string|array $path パス文字列。配列も与えられる
     * @param mixed $default 無かった場合のデフォルト値
     * @param string $delimiter パスの区切り文字。大抵は '.' か '/'
     * @return mixed パスが示す配列の値
     */
    function array_dive($array, $path, $default = null, $delimiter = '.')
    {
        $keys = is_array($path) ? $path : explode($delimiter, $path);
        foreach ($keys as $key) {
            if (!is_arrayable($array)) {
                return $default;
            }
            if (!array_keys_exist($key, $array)) {
                return $default;
            }
            $array = $array[$key];
        }
        return $array;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_each') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_each'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_each')) {
    /**
     * array_reduce の参照版（のようなもの）
     *
     * 配列をループで回し、その途中経過、値、キー、連番をコールバック引数で渡して最終的な結果を返り値として返す。
     * array_reduce と少し似てるが、下記の点が異なる。
     *
     * - いわゆる $carry は返り値で表すのではなく、参照引数で表す
     * - 値だけでなくキー、連番も渡ってくる
     * - 巨大配列の場合でも速度劣化が少ない（array_reduce に巨大配列を渡すと実用にならないレベルで遅くなる）
     *
     * $callback の引数は `($value, $key, $n)` （$n はキーとは関係がない 0 ～ 要素数-1 の通し連番）。
     *
     * 返り値ではなく参照引数なので return する必要はない（ワンライナーが書きやすくなる）。
     * 返り値が空くのでループ制御に用いる。
     * 今のところ $callback が false を返すとそこで break するのみ。
     *
     * 第3引数を省略した場合、**クロージャの第1引数のデフォルト値が使われる**。
     * これは特筆すべき動作で、不格好な第3引数を完全に省略することができる（サンプルコードを参照）。
     * ただし「php の文法違反（今のところエラーにはならないし、全てにデフォルト値をつければ一応回避可能）」「リフレクションを使う（ほんの少し遅くなる）」などの弊害が有るので推奨はしない。
     * （ただ、「意図していることをコードで表す」といった観点ではこの記法の方が正しいとも思う）。
     *
     * Example:
     * ```php
     * // 全要素を文字列的に足し合わせる
     * that(array_each([1, 2, 3, 4, 5], function (&$carry, $v) {$carry .= $v;}, ''))->isSame('12345');
     * // 値をキーにして要素を2乗値にする
     * that(array_each([1, 2, 3, 4, 5], function (&$carry, $v) {$carry[$v] = $v * $v;}, []))->isSame([
     *     1 => 1,
     *     2 => 4,
     *     3 => 9,
     *     4 => 16,
     *     5 => 25,
     * ]);
     * // 上記と同じ。ただし、3 で break する
     * that(array_each([1, 2, 3, 4, 5], function (&$carry, $v, $k){
     *     if ($k === 3) return false;
     *     $carry[$v] = $v * $v;
     * }, []))->isSame([
     *     1 => 1,
     *     2 => 4,
     *     3 => 9,
     * ]);
     *
     * // 下記は完全に同じ（第3引数の代わりにデフォルト引数を使っている）
     * that(array_each([1, 2, 3], function (&$carry = [], $v = null) {
     *         $carry[$v] = $v * $v;
     *     }))->isSame(array_each([1, 2, 3], function (&$carry, $v) {
     *         $carry[$v] = $v * $v;
     *     }, [])
     *     // 個人的に↑のようなぶら下がり引数があまり好きではない（クロージャを最後の引数にしたい）
     * );
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param callable $callback 評価クロージャ。(&$carry, $key, $value) を受ける
     * @param mixed $default ループの最初や空の場合に適用される値
     * @return mixed each した結果
     */
    function array_each($array, $callback, $default = null)
    {
        if (func_num_args() === 2) {
            /** @var \ReflectionFunction $ref */
            $ref = reflect_callable($callback);
            $params = $ref->getParameters();
            if ($params[0]->isDefaultValueAvailable()) {
                $default = $params[0]->getDefaultValue();
            }
        }

        $n = 0;
        foreach ($array as $k => $v) {
            $return = $callback($default, $v, $k, $n++);
            if ($return === false) {
                break;
            }
        }
        return $default;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_find_first') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_find_first'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_find_first')) {
    /**
     * array_search のクロージャ版のようなもの
     *
     * コールバックの返り値が true 相当のものを返す。
     * $is_key に true を与えるとそのキーを返す（デフォルトの動作）。
     * $is_key に false を与えるとコールバックの結果を返す。
     *
     * この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す可能性もあります。
     *
     * Example:
     * ```php
     * // 最初に見つかったキーを返す
     * that(array_find_first(['a', '8', '9'], 'ctype_digit'))->isSame(1);
     * that(array_find_first(['a', 'b', 'b'], fn($v) => $v === 'b'))->isSame(1);
     * // 最初に見つかったコールバック結果を返す（最初の数字の2乗を返す）
     * $ifnumeric2power = fn($v) => ctype_digit($v) ? $v * $v : false;
     * that(array_find_first(['a', '8', '9'], $ifnumeric2power, false))->isSame(64);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 調べる配列
     * @param callable $callback 評価コールバック
     * @param bool $is_key キーを返すか否か
     * @return mixed コールバックが true を返した最初のキー。存在しなかったら null
     */
    function array_find_first($array, $callback, $is_key = true)
    {
        $callback = func_user_func_array($callback);

        $n = 0;
        foreach ($array as $k => $v) {
            $result = $callback($v, $k, $n++);
            if ($result) {
                if ($is_key) {
                    return $k;
                }
                return $result;
            }
        }
        return null;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_flatten') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_flatten'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_flatten')) {
    /**
     * 多階層配列をフラットに展開する
     *
     * 巷にあふれている実装と違って、 ["$pkey.$ckey" => $value] 形式の配列でも返せる。
     * $delimiter で区切り文字を指定した場合にそのようになる。
     * $delimiter = null の場合に本当の配列で返す（巷の実装と同じ）。
     *
     * Example:
     * ```php
     * $array = [
     *    'k1' => 'v1',
     *    'k2' => [
     *        'k21' => 'v21',
     *        'k22' => [
     *            'k221' => 'v221',
     *            'k222' => 'v222',
     *            'k223' => [1, 2, 3],
     *        ],
     *    ],
     * ];
     * // 区切り文字指定なし
     * that(array_flatten($array))->isSame([
     *    0 => 'v1',
     *    1 => 'v21',
     *    2 => 'v221',
     *    3 => 'v222',
     *    4 => 1,
     *    5 => 2,
     *    6 => 3,
     * ]);
     * // 区切り文字指定
     * that(array_flatten($array, '.'))->isSame([
     *    'k1'            => 'v1',
     *    'k2.k21'        => 'v21',
     *    'k2.k22.k221'   => 'v221',
     *    'k2.k22.k222'   => 'v222',
     *    'k2.k22.k223.0' => 1,
     *    'k2.k22.k223.1' => 2,
     *    'k2.k22.k223.2' => 3,
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param string|\Closure|null $delimiter キーの区切り文字。 null を与えると連番になる
     * @return array フラット化された配列
     */
    function array_flatten($array, $delimiter = null)
    {
        $result = [];
        $core = function ($array, $delimiter, $parents) use (&$core, &$result) {
            foreach ($array as $k => $v) {
                $keys = $parents;
                $keys[] = $k;
                if (is_iterable($v)) {
                    $core($v, $delimiter, $keys);
                }
                else {
                    if ($delimiter === null) {
                        $result[] = $v;
                    }
                    elseif ($delimiter instanceof \Closure) {
                        $result[$delimiter($keys)] = $v;
                    }
                    else {
                        $result[implode($delimiter, $keys)] = $v;
                    }
                }
            }
        };

        $core($array, $delimiter, []);
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_get') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_get'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_get')) {
    /**
     * デフォルト値付きの配列値取得
     *
     * 存在しない場合は $default を返す。
     *
     * $key に配列を与えるとそれらの値の配列を返す（lookup 的な動作）。
     * その場合、$default が活きるのは「全て無かった場合」となる。
     *
     * さらに $key が配列の場合に限り、 $default を省略すると空配列として動作する。
     *
     * 同様に、$key にクロージャを与えると、その返り値が true 相当のものを返す。
     * その際、 $default が配列なら一致するものを配列で返し、配列でないなら単値で返す。
     *
     * Example:
     * ```php
     * // 単純取得
     * that(array_get(['a', 'b', 'c'], 1))->isSame('b');
     * // 単純デフォルト
     * that(array_get(['a', 'b', 'c'], 9, 999))->isSame(999);
     * // 配列取得
     * that(array_get(['a', 'b', 'c'], [0, 2]))->isSame([0 => 'a', 2 => 'c']);
     * // 配列部分取得
     * that(array_get(['a', 'b', 'c'], [0, 9]))->isSame([0 => 'a']);
     * // 配列デフォルト（null ではなく [] を返す）
     * that(array_get(['a', 'b', 'c'], [9]))->isSame([]);
     * // クロージャ指定＆単値（コールバックが true を返す最初の要素）
     * that(array_get(['a', 'b', 'c'], fn($v) => in_array($v, ['b', 'c'])))->isSame('b');
     * // クロージャ指定＆配列（コールバックが true を返すもの）
     * that(array_get(['a', 'b', 'c'], fn($v) => in_array($v, ['b', 'c']), []))->isSame([1 => 'b', 2 => 'c']);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array|\ArrayAccess $array 配列
     * @param string|int|array|\Closure $key 取得したいキー。配列を与えると全て返す。クロージャの場合は true 相当を返す
     * @param mixed $default 無かった場合のデフォルト値
     * @return mixed 指定したキーの値
     */
    function array_get($array, $key, $default = null)
    {
        if (is_array($key)) {
            $result = [];
            foreach ($key as $k) {
                if (array_keys_exist($k, $array)) {
                    $result[$k] = $array[$k];
                }
            }
            if (!$result) {
                // 明示的に与えられていないなら [] を使用する
                if (func_num_args() === 2) {
                    $default = [];
                }
                return $default;
            }
            return $result;
        }

        if ($key instanceof \Closure) {
            $result = [];
            $n = 0;
            foreach ($array as $k => $v) {
                if ($key($v, $k, $n++)) {
                    if (func_num_args() === 2) {
                        return $v;
                    }
                    $result[$k] = $v;
                }
            }
            if (!$result) {
                return $default;
            }
            return $result;
        }

        if (array_keys_exist($key, $array)) {
            return $array[$key];
        }
        return $default;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_keys_exist') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_keys_exist'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_keys_exist')) {
    /**
     * array_key_exists の複数版
     *
     * 指定キーが全て存在するなら true を返す。
     * 配列ではなく単一文字列を与えても動作する（array_key_exists と全く同じ動作になる）。
     *
     * $keys に空を与えると例外を投げる。
     * $keys に配列を与えるとキーで潜ってチェックする（Example 参照）。
     *
     * Example:
     * ```php
     * // すべて含むので true
     * that(array_keys_exist(['a', 'b', 'c'], ['a' => 'A', 'b' => 'B', 'c' => 'C']))->isTrue();
     * // N は含まないので false
     * that(array_keys_exist(['a', 'b', 'N'], ['a' => 'A', 'b' => 'B', 'c' => 'C']))->isFalse();
     * // 配列を与えると潜る（日本語で言えば「a というキーと、x というキーとその中に x1, x2 というキーがあるか？」）
     * that(array_keys_exist(['a', 'x' => ['x1', 'x2']], ['a' => 'A', 'x' => ['x1' => 'X1', 'x2' => 'X2']]))->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array|string $keys 調べるキー
     * @param array|\ArrayAccess $array 調べる配列
     * @return bool 指定キーが全て存在するなら true
     */
    function array_keys_exist($keys, $array)
    {
        $keys = is_iterable($keys) ? $keys : [$keys];
        if (is_empty($keys)) {
            throw new \InvalidArgumentException('$keys is empty.');
        }

        $is_arrayaccess = $array instanceof \ArrayAccess;

        foreach ($keys as $k => $key) {
            if (is_array($key)) {
                // まずそのキーをチェックして
                if (!array_keys_exist($k, $array)) {
                    return false;
                }
                // あるなら再帰する
                if (!array_keys_exist($key, $array[$k])) {
                    return false;
                }
            }
            elseif ($is_arrayaccess) {
                if (!$array->offsetExists($key)) {
                    return false;
                }
            }
            elseif (!array_key_exists($key, $array)) {
                return false;
            }
        }
        return true;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_lookup') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_lookup'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_lookup')) {
    /**
     * キー保存可能な array_column
     *
     * array_column は キーを保存することが出来ないが、この関数は引数を2つだけ与えるとキーはそのままで array_column 相当の配列を返す。
     * 逆に第3引数にクロージャを与えるとその結果をキーにすることが出来る。
     *
     * $column_key に配列を与えるとそれだけの配列を返す。
     *
     * Example:
     * ```php
     * $array = [
     *     11 => ['id' => 1, 'name' => 'name1', 'status' => true],
     *     12 => ['id' => 2, 'name' => 'name2', 'status' => false],
     *     13 => ['id' => 3, 'name' => 'name3', 'status' => true],
     * ];
     * // 第3引数を渡せば array_column と全く同じ
     * that(array_lookup($array, 'name', 'id'))->isSame(array_column($array, 'name', 'id'));
     * that(array_lookup($array, 'name', null))->isSame(array_column($array, 'name', null));
     * // 省略すればキーが保存される
     * that(array_lookup($array, 'name'))->isSame([
     *     11 => 'name1',
     *     12 => 'name2',
     *     13 => 'name3',
     * ]);
     * // クロージャを指定すればキーが生成される
     * that(array_lookup($array, 'name', fn($v, $k) => $k * 2))->isSame([
     *     22 => 'name1',
     *     24 => 'name2',
     *     26 => 'name3',
     * ]);
     * // $column_key に配列を与えるとそれだけの配列を返す
     * that(array_lookup($array, ['id', 'status']))->isSame([
     *     11 => ['id' => 1, 'status' => true],
     *     12 => ['id' => 2, 'status' => false],
     *     13 => ['id' => 3, 'status' => true],
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param array|string|null $column_key 値となるキー
     * @param string|\Closure|null $index_key キーとなるキー
     * @return array 新しい配列
     */
    function array_lookup($array, $column_key = null, $index_key = null)
    {
        $array = arrayval($array, false);

        if (is_array($column_key)) {
            $array = array_maps($array, fn($row) => array_pickup($row, $column_key));
            $column_key = null;
        }

        if ($index_key instanceof \Closure) {
            return array_combine((array) array_maps($array, $index_key), array_column($array, $column_key));
        }
        if (func_num_args() === 3) {
            return array_column($array, $column_key, $index_key);
        }
        return array_combine(array_keys($array), array_column($array, $column_key));
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_map_filter') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_map_filter'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_map_filter')) {
    /**
     * array_map + array_filter する
     *
     * コールバックを適用して、結果が true 相当の要素のみ取り出す。
     * $strict に true を与えると「null でない」要素のみ返される。
     *
     * $callback が要求するならキーも渡ってくる。
     *
     * Example:
     * ```php
     * that(array_map_filter([' a ', ' b ', ''], 'trim'))->isSame(['a', 'b']);
     * that(array_map_filter([' a ', ' b ', ''], 'trim', true))->isSame(['a', 'b', '']);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param callable $callback 評価クロージャ
     * @param bool $strict 厳密比較フラグ。 true だと null のみが偽とみなされる
     * @return iterable $callback が真を返した新しい配列
     */
    function array_map_filter($array, $callback, $strict = false)
    {
        // Iterator だが ArrayAccess ではないオブジェクト（Generator とか）は unset できないので配列として扱わざるを得ない
        if (!(function_configure('array.variant') && is_arrayable($array))) {
            $array = arrayval($array, false);
        }

        $callback = func_user_func_array($callback);
        $n = 0;
        foreach (arrayval($array, false) as $k => $v) {
            $vv = $callback($v, $k, $n++);
            if (($strict && $vv !== null) || (!$strict && $vv)) {
                $array[$k] = $vv;
            }
            else {
                unset($array[$k]);
            }
        }
        return $array;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_map_key') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_map_key'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_map_key')) {
    /**
     * キーをマップして変換する
     *
     * $callback が null を返すとその要素は取り除かれる。
     *
     * Example:
     * ```php
     * that(array_map_key(['a' => 'A', 'b' => 'B'], 'strtoupper'))->isSame(['A' => 'A', 'B' => 'B']);
     * that(array_map_key(['a' => 'A', 'b' => 'B'], function () { }))->isSame([]);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param callable $callback 評価クロージャ
     * @return array キーが変換された新しい配列
     */
    function array_map_key($array, $callback)
    {
        $callback = func_user_func_array($callback);
        $result = [];
        $n = 0;
        foreach ($array as $k => $v) {
            $k2 = $callback($k, $v, $n++);
            if ($k2 !== null) {
                $result[$k2] = $v;
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_maps') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_maps'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_maps')) {
    /**
     * 複数コールバックを指定できる array_map
     *
     * 指定したコールバックで複数回回してマップする。
     * `array_maps($array, $f, $g)` は `array_map($g, array_map($f, $array))` とほぼ等しい。
     * ただし、引数は順番が違う（可変引数のため）し、コールバックが要求するならキーも渡ってくる。
     * さらに文字列関数で "..." から始まっているなら可変引数としてコールする。
     *
     * 少し変わった仕様として、コールバックに [$method => $args] を付けるとそれはメソッド呼び出しになる。
     * つまり各要素 $v に対して `$v->$method(...$args)` がマップ結果になる。
     * さらに引数が不要なら `@method` とするだけで良い。
     *
     * Example:
     * ```php
     * // 値を3乗したあと16進表記にして大文字化する
     * that(array_maps([1, 2, 3, 4, 5], fn($v) => pow($v, 3), 'dechex', 'strtoupper'))->isSame(['1', '8', '1B', '40', '7D']);
     * // キーも渡ってくる
     * that(array_maps(['a' => 'A', 'b' => 'B'], fn($v, $k) => "$k:$v"))->isSame(['a' => 'a:A', 'b' => 'b:B']);
     * // ... で可変引数コール
     * that(array_maps([[1, 3], [1, 5, 2]], '...range'))->isSame([[1, 2, 3], [1, 3, 5]]);
     * // メソッドコールもできる（引数不要なら `@method` でも同じ）
     * that(array_maps([new \Exception('a'), new \Exception('b')], ['getMessage' => []]))->isSame(['a', 'b']);
     * that(array_maps([new \Exception('a'), new \Exception('b')], '@getMessage'))->isSame(['a', 'b']);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param callable ...$callbacks 評価クロージャ配列
     * @return iterable 評価クロージャを通した新しい配列
     */
    function array_maps($array, ...$callbacks)
    {
        // Iterator だが ArrayAccess ではないオブジェクト（Generator とか）は unset できないので配列として扱わざるを得ない
        if (!(function_configure('array.variant') && is_arrayable($array))) {
            $array = arrayval($array, false);
        }

        foreach ($callbacks as $callback) {
            if (is_string($callback) && $callback[0] === '@') {
                $margs = [];
                $vargs = false;
                $callback = substr($callback, 1);
            }
            elseif (is_array($callback) && count($callback) === 1) {
                $margs = reset($callback);
                $vargs = false;
                $callback = key($callback);
            }
            elseif (is_string($callback) && substr($callback, 0, 3) === '...') {
                $margs = null;
                $vargs = true;
                $callback = substr($callback, 3);
            }
            else {
                $margs = null;
                $vargs = false;
                $callback = func_user_func_array($callback);
            }
            $n = 0;
            foreach (arrayval($array, false) as $k => $v) {
                if (isset($margs)) {
                    $array[$k] = ([$v, $callback])(...$margs);
                }
                elseif ($vargs) {
                    $array[$k] = $callback(...$v);
                }
                else {
                    $array[$k] = $callback($v, $k, $n++);
                }
            }
        }
        return $array;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_pickup') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_pickup'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_pickup')) {
    /**
     * キーを指定してそれだけの配列にする
     *
     * `array_intersect_key($array, array_flip($keys))` とほぼ同義。
     * 違いは Traversable を渡せることと、結果配列の順番が $keys に従うこと。
     *
     * $keys に連想配列を渡すとキーを読み替えて動作する（Example を参照）。
     * さらにその時クロージャを渡すと($key, $value)でコールされた結果が新しいキーになる。
     *
     * Example:
     * ```php
     * $array = ['a' => 'A', 'b' => 'B', 'c' => 'C'];
     * // a と c を取り出す
     * that(array_pickup($array, ['a', 'c']))->isSame(['a' => 'A', 'c' => 'C']);
     * // 順番は $keys 基準になる
     * that(array_pickup($array, ['c', 'a']))->isSame(['c' => 'C', 'a' => 'A']);
     * // 連想配列を渡すと読み替えて返す
     * that(array_pickup($array, ['c' => 'cX', 'a' => 'aX']))->isSame(['cX' => 'C', 'aX' => 'A']);
     * // コールバックを渡せる
     * that(array_pickup($array, ['c' => fn($k, $v) => "$k-$v"]))->isSame(['c-C' => 'C']);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable|object $array 対象配列
     * @param array $keys 取り出すキー
     * @return array 新しい配列
     */
    function array_pickup($array, $keys)
    {
        $array = arrayval($array, false);

        $result = [];
        foreach (arrayval($keys, false) as $k => $key) {
            if (is_int($k)) {
                if (array_key_exists($key, $array)) {
                    $result[$key] = $array[$key];
                }
            }
            else {
                if (array_key_exists($k, $array)) {
                    if (is_callback($key)) {
                        $key = $key($k, $array[$k]);
                    }
                    $result[$key] = $array[$k];
                }
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_sprintf') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_sprintf'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_sprintf')) {
    /**
     * キーと値で sprintf する
     *
     * 配列の各要素を文字列化して返すイメージ。
     * $glue を与えるとさらに implode して返す（返り値が文字列になる）。
     *
     * $format は書式文字列（$v, $k）。
     * callable を与えると sprintf ではなくコールバック処理になる（$v, $k）。
     * 省略（null）するとキーを format 文字列、値を引数として **vsprintf** する。
     *
     * Example:
     * ```php
     * $array = ['key1' => 'val1', 'key2' => 'val2'];
     * // key, value を利用した sprintf
     * that(array_sprintf($array, '%2$s=%1$s'))->isSame(['key1=val1', 'key2=val2']);
     * // 第3引数を与えるとさらに implode される
     * that(array_sprintf($array, '%2$s=%1$s', ' '))->isSame('key1=val1 key2=val2');
     * // クロージャを与えるとコールバック動作になる
     * $closure = fn($v, $k) => "$k=" . strtoupper($v);
     * that(array_sprintf($array, $closure, ' '))->isSame('key1=VAL1 key2=VAL2');
     * // 省略すると vsprintf になる
     * that(array_sprintf([
     *     'str:%s,int:%d' => ['sss', '3.14'],
     *     'single:%s'     => 'str',
     * ], null, '|'))->isSame('str:sss,int:3|single:str');
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param string|callable|null $format 書式文字列あるいはクロージャ
     * @param ?string $glue 結合文字列。未指定時は implode しない
     * @return array|string sprintf された配列
     */
    function array_sprintf($array, $format = null, $glue = null)
    {
        if (is_callable($format)) {
            $callback = func_user_func_array($format);
        }
        elseif ($format === null) {
            $callback = fn($v, $k, $n) => vsprintf($k, is_array($v) ? $v : [$v]);
        }
        else {
            $callback = fn($v, $k, $n) => sprintf($format, $v, $k);
        }

        $result = [];
        $n = 0;
        foreach ($array as $k => $v) {
            $result[] = $callback($v, $k, $n++);
        }

        if ($glue !== null) {
            return implode($glue, $result);
        }

        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_strpad') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_strpad'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_strpad')) {
    /**
     * 配列のキー・要素に文字列を付加する
     *
     * $key_prefix, $val_prefix でそれぞれ「キーに付与する文字列」「値に付与する文字列」が指定できる。
     * 配列を与えると [サフィックス, プレフィックス] という意味になる。
     * デフォルト（ただの文字列）はプレフィックス（値だけに付与したいなら array_map で十分なので）。
     *
     * Example:
     * ```php
     * $array = ['key1' => 'val1', 'key2' => 'val2'];
     * // キーにプレフィックス付与
     * that(array_strpad($array, 'prefix-'))->isSame(['prefix-key1' => 'val1', 'prefix-key2' => 'val2']);
     * // 値にサフィックス付与
     * that(array_strpad($array, '', ['-suffix']))->isSame(['key1' => 'val1-suffix', 'key2' => 'val2-suffix']);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param string|array $key_prefix キー側の付加文字列
     * @param string|array $val_prefix 値側の付加文字列
     * @return array 文字列付与された配列
     */
    function array_strpad($array, $key_prefix, $val_prefix = '')
    {
        $key_suffix = '';
        if (is_array($key_prefix)) {
            [$key_suffix, $key_prefix] = $key_prefix + [1 => ''];
        }
        $val_suffix = '';
        if (is_array($val_prefix)) {
            [$val_suffix, $val_prefix] = $val_prefix + [1 => ''];
        }

        $enable_key = strlen($key_prefix) || strlen($key_suffix);
        $enable_val = strlen($val_prefix) || strlen($val_suffix);

        $result = [];
        foreach ($array as $key => $val) {
            if ($enable_key) {
                $key = $key_prefix . $key . $key_suffix;
            }
            if ($enable_val) {
                $val = $val_prefix . $val . $val_suffix;
            }
            $result[$key] = $val;
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\array_unset') || (new \ReflectionFunction('ryunosuke\\chmonos\\array_unset'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\array_unset')) {
    /**
     * 伏せると同時にその値を返す
     *
     * $key に配列を与えると全て伏せて配列で返す。
     * その場合、$default が活きるのは「全て無かった場合」となる。
     *
     * さらに $key が配列の場合に限り、 $default を省略すると空配列として動作する。
     *
     * 配列を与えた場合の返り値は与えた配列の順番・キーが活きる。
     * これを利用すると list の展開の利便性が上がったり、連想配列で返すことができる。
     *
     * 同様に、$key にクロージャを与えると、その返り値が true 相当のものを伏せて配列で返す。
     * callable ではなくクロージャのみ対応する。
     *
     * Example:
     * ```php
     * $array = ['a' => 'A', 'b' => 'B'];
     * // ない場合は $default を返す
     * that(array_unset($array, 'x', 'X'))->isSame('X');
     * // 指定したキーを返す。そのキーは伏せられている
     * that(array_unset($array, 'a'))->isSame('A');
     * that($array)->isSame(['b' => 'B']);
     *
     * $array = ['a' => 'A', 'b' => 'B', 'c' => 'C'];
     * // 配列を与えるとそれらを返す。そのキーは全て伏せられている
     * that(array_unset($array, ['a', 'b', 'x']))->isSame(['A', 'B']);
     * that($array)->isSame(['c' => 'C']);
     *
     * $array = ['a' => 'A', 'b' => 'B', 'c' => 'C'];
     * // 配列のキーは返されるキーを表す。順番も維持される
     * that(array_unset($array, ['x2' => 'b', 'x1' => 'a']))->isSame(['x2' => 'B', 'x1' => 'A']);
     *
     * $array = ['hoge' => 'HOGE', 'fuga' => 'FUGA', 'piyo' => 'PIYO'];
     * // 値に "G" を含むものを返す。その要素は伏せられている
     * that(array_unset($array, fn($v) => strpos($v, 'G') !== false))->isSame(['hoge' => 'HOGE', 'fuga' => 'FUGA']);
     * that($array)->isSame(['piyo' => 'PIYO']);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array|\ArrayAccess $array 配列
     * @param string|int|array|callable $key 伏せたいキー。配列を与えると全て伏せる。クロージャの場合は true 相当を伏せる
     * @param mixed $default 無かった場合のデフォルト値
     * @return mixed 指定したキーの値
     */
    function array_unset(&$array, $key, $default = null)
    {
        if (is_array($key)) {
            $result = [];
            foreach ($key as $rk => $ak) {
                if (array_keys_exist($ak, $array)) {
                    $result[$rk] = $array[$ak];
                    unset($array[$ak]);
                }
            }
            if (!$result) {
                // 明示的に与えられていないなら [] を使用する
                if (func_num_args() === 2) {
                    $default = [];
                }
                return $default;
            }
            return $result;
        }

        if ($key instanceof \Closure) {
            $result = [];
            $n = 0;
            foreach ($array as $k => $v) {
                if ($key($v, $k, $n++)) {
                    $result[$k] = $v;
                    unset($array[$k]);
                }
            }
            if (!$result) {
                return $default;
            }
            return $result;
        }

        if (array_keys_exist($key, $array)) {
            $result = $array[$key];
            unset($array[$key]);
            return $result;
        }
        return $default;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\arrayize') || (new \ReflectionFunction('ryunosuke\\chmonos\\arrayize'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\arrayize')) {
    /**
     * 引数の配列を生成する。
     *
     * 配列以外を渡すと配列化されて追加される。
     * 配列を渡してもそのままだが、連番配列の場合はマージ、連想配列の場合は結合となる。
     * iterable や Traversable は考慮せずあくまで「配列」としてチェックする。
     *
     * Example:
     * ```php
     * // 値は配列化される
     * that(arrayize(1, 2, 3))->isSame([1, 2, 3]);
     * // 配列はそのまま
     * that(arrayize([1], [2], [3]))->isSame([1, 2, 3]);
     * // 連想配列、連番配列の挙動
     * that(arrayize([1, 2, 3], [4, 5, 6], ['a' => 'A1'], ['a' => 'A2']))->isSame([1, 2, 3, 4, 5, 6, 'a' => 'A1']);
     * // stdClass は foreach 可能だがあくまで配列としてチェックする
     * $object = new \stdClass();
     * that(arrayize($object, false, [1, 2, 3]))->isSame([$object, false, 1, 2, 3]);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param mixed ...$variadic 生成する要素（可変引数）
     * @return array 引数を配列化したもの
     */
    function arrayize(...$variadic)
    {
        $result = [];
        foreach ($variadic as $arg) {
            if (!is_array($arg)) {
                $result[] = $arg;
            }
            elseif ($result && !is_hasharray($arg)) {
                $result = array_merge($result, $arg);
            }
            else {
                // array_merge に合わせるなら $result = $arg + $result で後方上書きの方がいいかも
                // 些細な変更だけど後方互換性が完全に壊れるのでいったん保留（可変引数なんてほとんど使ってないと思うけど…）
                $result += $arg; // for compatible
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\first_keyvalue') || (new \ReflectionFunction('ryunosuke\\chmonos\\first_keyvalue'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\first_keyvalue')) {
    /**
     * 配列の最初のキー/値ペアをタプルで返す
     *
     * 空の場合は $default を返す。
     *
     * Example:
     * ```php
     * that(first_keyvalue(['a', 'b', 'c']))->isSame([0, 'a']);
     * that(first_keyvalue([], 999))->isSame(999);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable|object $array 対象配列
     * @param mixed $default 無かった場合のデフォルト値
     * @return array [最初のキー, 最初の値]
     */
    function first_keyvalue($array, $default = null)
    {
        foreach ($array as $k => $v) {
            return [$k, $v];
        }
        return $default;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\first_value') || (new \ReflectionFunction('ryunosuke\\chmonos\\first_value'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\first_value')) {
    /**
     * 配列の最初の値を返す
     *
     * 空の場合は $default を返す。
     *
     * Example:
     * ```php
     * that(first_value(['a', 'b', 'c']))->isSame('a');
     * that(first_value([], 999))->isSame(999);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param mixed $default 無かった場合のデフォルト値
     * @return mixed 最初の値
     */
    function first_value($array, $default = null)
    {
        if (is_empty($array)) {
            return $default;
        }
        /** @noinspection PhpUnusedLocalVariableInspection */
        [$k, $v] = first_keyvalue($array);
        return $v;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_hasharray') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_hasharray'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_hasharray')) {
    /**
     * 配列が連想配列か調べる
     *
     * 空の配列は普通の配列とみなす。
     *
     * Example:
     * ```php
     * that(is_hasharray([]))->isFalse();
     * that(is_hasharray([1, 2, 3]))->isFalse();
     * that(is_hasharray(['x' => 'X']))->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array $array 調べる配列
     * @return bool 連想配列なら true
     */
    function is_hasharray(array $array)
    {
        if (function_exists('array_is_list')) {
            return !array_is_list($array); // @codeCoverageIgnore
        }

        $i = 0;
        foreach ($array as $k => $dummy) {
            if ($k !== $i++) {
                return true;
            }
        }
        return false;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_indexarray') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_indexarray'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_indexarray')) {
    /**
     * 配列が数値配列か調べる
     *
     * 空の配列も数値配列とみなす。
     * さらにいわゆる「連番配列」ではなく「キーが数値のみか？」で判定する。
     *
     * つまり、 is_hasharray とは排他的ではない。
     *
     * Example:
     * ```php
     * that(is_indexarray([]))->isTrue();
     * that(is_indexarray([1, 2, 3]))->isTrue();
     * that(is_indexarray(['x' => 'X']))->isFalse();
     * // 抜け番があっても true になる（これは is_hasharray も true になる）
     * that(is_indexarray([1 => 1, 2 => 2, 3 => 3]))->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param array $array 調べる配列
     * @return bool 数値配列なら true
     */
    function is_indexarray($array)
    {
        foreach ($array as $k => $dummy) {
            if (!is_int($k)) {
                return false;
            }
        }
        return true;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\kvsort') || (new \ReflectionFunction('ryunosuke\\chmonos\\kvsort'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\kvsort')) {
    /**
     * 比較関数にキーも渡ってくる安定ソート
     *
     * 比較関数は ($valueA, $valueB, $keyA, $keyB) という引数を取る。
     * 「値で比較して同値だったらキーも見たい」という状況はまれによくあるはず。
     * さらに安定ソートであり、同値だとしても元の並び順は維持される。
     *
     * $schwartzians を指定した場合は呼び出しが ($schwartzianA, $schwartzianB, $valueA, $valueB, $keyA, $keyB) になる。
     * $schwartzianX は単一値の場合はその結果、配列の場合はキー構造が維持されて渡ってくる。
     * このあたりは表現しにくいので Example を参照。
     *
     * $comparator は省略できる。省略した場合、型に基づいてよしなにソートする。
     * （が、比較のたびに型チェックが入るので指定したほうが高速に動く）。
     *
     * ただし、標準のソート関数とは異なり、参照渡しではなくソートして返り値で返す。
     * また、いわゆる asort であり、キー・値は常に維持される。
     *
     * Example:
     * ```php
     * $array = [
     *     'a'  => 3,
     *     'b'  => 1,
     *     'c'  => 2,
     *     'x1' => 9,
     *     'x2' => 9,
     *     'x3' => 9,
     * ];
     * // 普通のソート
     * that(kvsort($array))->isSame([
     *     'b'  => 1,
     *     'c'  => 2,
     *     'a'  => 3,
     *     'x1' => 9,
     *     'x2' => 9,
     *     'x3' => 9,
     * ]);
     * // キーを使用したソート
     * that(kvsort($array, fn($av, $bv, $ak, $bk) => strcmp($bk, $ak)))->isSame([
     *     'x3' => 9,
     *     'x2' => 9,
     *     'x1' => 9,
     *     'c'  => 2,
     *     'b'  => 1,
     *     'a'  => 3,
     * ]);
     * // シュワルツ変換を使用したソート（引数説明のために全て列挙している）
     * that(kvsort($array, fn($hashA, $hashB, $av, $bv, $ak, $bk) => ($hashA['md5'] <=> $hashB['md5']) ?: ($hashA['sha1'] <=> $hashB['sha1']), [
     *     'md5'  => fn($v) => md5($v),
     *     'sha1' => fn($v) => sha1($v),
     * ]))->isSame([
     *     'x1' => 9,
     *     'x2' => 9,
     *     'x3' => 9,
     *     'b'  => 1,
     *     'c'  => 2,
     *     'a'  => 3,
     * ]);
     * // シュワルツ変換の場合 $comparator は省略可能（昇順）で、配列ではなく単一値を渡せばその結果値が渡ってくる（これは要するに md5 での昇順ソート）
     * that(kvsort($array, null, fn($v) => md5($v)))->isSame([
     *     'x1' => 9,
     *     'x2' => 9,
     *     'x3' => 9,
     *     'b'  => 1,
     *     'c'  => 2,
     *     'a'  => 3,
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @template T of iterable|array
     * @param T $array 対象配列
     * @param callable|int|null $comparator 比較関数。SORT_XXX も使える
     * @param callable|callable[] $schwartzians シュワルツ変換に使用する仮想列
     * @return T ソートされた配列
     */
    function kvsort($array, $comparator = null, $schwartzians = [])
    {
        // シュワルツ変換の準備（単一であるとかピッタリ呼び出しとか）
        $is_array = is_array($schwartzians) && !is_callable($schwartzians);
        $schwartzians = arrayize($schwartzians);
        foreach ($schwartzians as $s => $schwartzian) {
            $schwartzians[$s] = func_user_func_array($schwartzian);
        }

        // $comparator が定数あるいは省略時は自動導出
        if ($comparator === null || is_int($comparator)) {
            // シュワルツ変換のときは型は意識しなくてよい（呼び元の責務）ので昇順降順だけ見る
            if ($schwartzians) {
                if (($comparator ?? SORT_ASC) === SORT_ASC) {
                    $comparator = fn($as, $bs) => $as <=> $bs;
                }
                else {
                    $comparator = fn($as, $bs) => -($as <=> $bs);
                }
            }
            // そうでない場合は varcmp に委譲
            else {
                $sort_flg = $comparator;
                $comparator = fn($av, $bv, $ak, $bk) => varcmp($av, $bv, $sort_flg);
            }
        }

        // 一時配列の準備
        $n = 0;
        $virtuals = [];
        $result = [];
        foreach ($array as $k => $v) {
            if ($is_array) {
                foreach ($schwartzians as $s => $schwartzian) {
                    $virtuals[$k][$s] = $schwartzian($v, $k, $n);
                }
            }
            else {
                $virtuals[$k] = $schwartzians[0]($v, $k, $n);
            }
            $result[$k] = $v;
        }
        uksort($result, function ($keyA, $keyB) use ($result, $comparator, $virtuals) {
            $a = $result[$keyA];
            $b = $result[$keyB];

            $virtual = $virtuals ? [$virtuals[$keyA], $virtuals[$keyB]] : [];
            return $comparator(...$virtual, ...[$a, $b, $keyA, $keyB]);
        });
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\last_key') || (new \ReflectionFunction('ryunosuke\\chmonos\\last_key'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\last_key')) {
    /**
     * 配列の最後のキーを返す
     *
     * 空の場合は $default を返す。
     *
     * Example:
     * ```php
     * that(last_key(['a', 'b', 'c']))->isSame(2);
     * that(last_key([], 999))->isSame(999);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param mixed $default 無かった場合のデフォルト値
     * @return mixed 最後のキー
     */
    function last_key($array, $default = null)
    {
        if (is_empty($array)) {
            return $default;
        }
        /** @noinspection PhpUnusedLocalVariableInspection */
        [$k, $v] = last_keyvalue($array);
        return $k;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\last_keyvalue') || (new \ReflectionFunction('ryunosuke\\chmonos\\last_keyvalue'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\last_keyvalue')) {
    /**
     * 配列の最後のキー/値ペアをタプルで返す
     *
     * 空の場合は $default を返す。
     *
     * Example:
     * ```php
     * that(last_keyvalue(['a', 'b', 'c']))->isSame([2, 'c']);
     * that(last_keyvalue([], 999))->isSame(999);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable|object $array 対象配列
     * @param mixed $default 無かった場合のデフォルト値
     * @return array [最後のキー, 最後の値]
     */
    function last_keyvalue($array, $default = null)
    {
        if (is_empty($array)) {
            return $default;
        }
        if (is_array($array)) {
            $k = array_key_last($array);
            return [$k, $array[$k]];
        }
        /** @noinspection PhpStatementHasEmptyBodyInspection */
        foreach ($array as $k => $v) {
            // dummy
        }
        // $k がセットされてるなら「ループが最低でも1度回った（≠空）」とみなせる
        if (isset($k)) {
            /** @noinspection PhpUndefinedVariableInspection */
            return [$k, $v];
        }
        return $default;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\last_value') || (new \ReflectionFunction('ryunosuke\\chmonos\\last_value'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\last_value')) {
    /**
     * 配列の最後の値を返す
     *
     * 空の場合は $default を返す。
     *
     * Example:
     * ```php
     * that(last_value(['a', 'b', 'c']))->isSame('c');
     * that(last_value([], 999))->isSame(999);
     * ```
     *
     * @package ryunosuke\Functions\Package\array
     *
     * @param iterable $array 対象配列
     * @param mixed $default 無かった場合のデフォルト値
     * @return mixed 最後の値
     */
    function last_value($array, $default = null)
    {
        if (is_empty($array)) {
            return $default;
        }
        /** @noinspection PhpUnusedLocalVariableInspection */
        [$k, $v] = last_keyvalue($array);
        return $v;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\class_constants') || (new \ReflectionFunction('ryunosuke\\chmonos\\class_constants'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\class_constants')) {
    /**
     * クラス定数を配列で返す
     *
     * `(new \ReflectionClass($class))->getConstants()` とほぼ同じだが、可視性でフィルタができる。
     * さらに「自分自身の定義か？」でもフィルタできる。
     *
     * Example:
     * ```php
     * $class = new class extends \ArrayObject
     * {
     *     private   const C_PRIVATE   = 'private';
     *     protected const C_PROTECTED = 'protected';
     *     public    const C_PUBLIC    = 'public';
     * };
     * // 普通に全定数を返す
     * that(class_constants($class))->isSame([
     *     'C_PRIVATE'      => 'private',
     *     'C_PROTECTED'    => 'protected',
     *     'C_PUBLIC'       => 'public',
     *     'STD_PROP_LIST'  => \ArrayObject::STD_PROP_LIST,
     *     'ARRAY_AS_PROPS' => \ArrayObject::ARRAY_AS_PROPS,
     * ]);
     * // public のみを返す
     * that(class_constants($class, IS_PUBLIC))->isSame([
     *     'C_PUBLIC'       => 'public',
     *     'STD_PROP_LIST'  => \ArrayObject::STD_PROP_LIST,
     *     'ARRAY_AS_PROPS' => \ArrayObject::ARRAY_AS_PROPS,
     * ]);
     * // 自身定義でかつ public のみを返す
     * that(class_constants($class, IS_OWNSELF | IS_PUBLIC))->isSame([
     *     'C_PUBLIC'       => 'public',
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\classobj
     *
     * @param string|object $class クラス名 or オブジェクト
     * @param ?int $filter アクセスレベル定数
     * @return array クラス定数の配列
     */
    function class_constants($class, $filter = null)
    {
        $class = ltrim(is_object($class) ? get_class($class) : $class, '\\');
        $filter ??= (IS_PUBLIC | IS_PROTECTED | IS_PRIVATE);

        $result = [];
        foreach ((new \ReflectionClass($class))->getReflectionConstants() as $constant) {
            if (($filter & IS_OWNSELF) && $constant->getDeclaringClass()->name !== $class) {
                continue;
            }
            $modifiers = $constant->getModifiers();
            $modifiers2 = 0;
            $modifiers2 |= ($modifiers & \ReflectionProperty::IS_PUBLIC) ? IS_PUBLIC : 0;
            $modifiers2 |= ($modifiers & \ReflectionProperty::IS_PROTECTED) ? IS_PROTECTED : 0;
            $modifiers2 |= ($modifiers & \ReflectionProperty::IS_PRIVATE) ? IS_PRIVATE : 0;
            if ($modifiers2 & $filter) {
                $result[$constant->name] = $constant->getValue();
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\class_shorten') || (new \ReflectionFunction('ryunosuke\\chmonos\\class_shorten'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\class_shorten')) {
    /**
     * クラスの名前空間部分を除いた短い名前を取得する
     *
     * Example:
     * ```php
     * that(class_shorten('vendor\\namespace\\ClassName'))->isSame('ClassName');
     * ```
     *
     * @package ryunosuke\Functions\Package\classobj
     *
     * @param string|object $class 対象クラス・オブジェクト
     * @return string クラスの短い名前
     */
    function class_shorten($class)
    {
        if (is_object($class)) {
            $class = get_class($class);
        }

        $parts = explode('\\', $class);
        return array_pop($parts);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\object_properties') || (new \ReflectionFunction('ryunosuke\\chmonos\\object_properties'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\object_properties')) {
    /**
     * オブジェクトのプロパティを可視・不可視を問わず取得する
     *
     * get_object_vars + no public プロパティを返すイメージ。
     * クロージャだけは特別扱いで this + use 変数を返す。
     *
     * Example:
     * ```php
     * $object = new #[\AllowDynamicProperties] class('something', 42) extends \Exception{};
     * $object->oreore = 'oreore';
     *
     * // get_object_vars はそのスコープから見えないプロパティを取得できない
     * // var_dump(get_object_vars($object));
     *
     * // array キャストは全て得られるが null 文字を含むので扱いにくい
     * // var_dump((array) $object);
     *
     * // この関数を使えば不可視プロパティも取得できる
     * that(object_properties($object))->subsetEquals([
     *     'message' => 'something',
     *     'code'    => 42,
     *     'oreore'  => 'oreore',
     * ]);
     *
     * // クロージャは this と use 変数を返す
     * that(object_properties(fn() => $object))->is([
     *     'this'   => $this,
     *     'object' => $object,
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\classobj
     *
     * @param object $object オブジェクト
     * @param array $privates 継承ツリー上の private が格納される
     * @return array 全プロパティの配列
     */
    function object_properties($object, &$privates = [])
    {
        if ($object instanceof \Closure) {
            $ref = new \ReflectionFunction($object);
            $uses = method_exists($ref, 'getClosureUsedVariables') ? $ref->getClosureUsedVariables() : $ref->getStaticVariables();
            return ['this' => $ref->getClosureThis()] + $uses;
        }

        $fields = [];
        foreach ((array) $object as $name => $field) {
            $cname = '';
            $names = explode("\0", $name);
            if (count($names) > 1) {
                $name = array_pop($names);
                $cname = $names[1];
            }
            $fields[$cname][$name] = $field;
        }

        $classname = get_class($object);
        $parents = array_values(['', '*', $classname] + class_parents($object));
        uksort($fields, function ($a, $b) use ($parents) {
            return array_search($a, $parents, true) <=> array_search($b, $parents, true);
        });

        $result = [];
        foreach ($fields as $cname => $props) {
            foreach ($props as $name => $field) {
                if ($cname !== '' && $cname !== '*' && $classname !== $cname) {
                    $privates[$cname][$name] = $field;
                }
                if (!array_key_exists($name, $result)) {
                    $result[$name] = $field;
                }
            }
        }

        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\type_exists') || (new \ReflectionFunction('ryunosuke\\chmonos\\type_exists'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\type_exists')) {
    /**
     * 型が存在するか返す
     *
     * class/interface/trait/enum exists の合せ技。
     * trait/enum のように今後型的なものがさらに増えるかもしれないし、class_exists だけして interface/trait が抜けているコードを何度も見てきた。
     * それを一元管理するような関数となる。
     *
     * Example:
     * ```php
     * that(class_exists(\Throwable::class))->isFalse();     // class_exists は class にしか反応しない
     * that(interface_exists(\Exception::class))->isFalse(); // interface_exists は interface にしか反応しない
     * that(trait_exists(\Error::class))->isFalse();         // trait_exists は trait にしか反応しない
     * // type_exists であれば全てに反応する
     * that(type_exists(\Throwable::class))->isTrue();
     * that(type_exists(\Exception::class))->isTrue();
     * that(type_exists(\Error::class))->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\classobj
     *
     * @param string $typename 調べる型名
     * @param bool $autoload オートロードを行うか
     * @return bool 型が存在するなら true
     */
    function type_exists($typename, $autoload = true)
    {
        if (class_exists($typename, $autoload)) {
            return true;
        }
        if (interface_exists($typename, $autoload)) {
            return true;
        }
        if (trait_exists($typename, $autoload)) {
            return true;
        }
        // enum は class で実装されているので enum_exists は不要
        return false;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\css_selector') || (new \ReflectionFunction('ryunosuke\\chmonos\\css_selector'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\css_selector')) {
    /**
     * CSS セレクタ文字をパースして配列で返す
     *
     * 包含などではない属性セレクタを与えると属性として認識する。
     * 独自仕様として・・・
     *
     * - [!attr]: 否定属性として false を返す
     * - {styles}: style 属性とみなす
     *
     * がある。
     *
     * Example:
     * ```php
     * that(css_selector('#hoge.c1.c2[name=hoge\[\]][href="http://hoge"][hidden][!readonly]{width:123px;height:456px}'))->is([
     *     'id'       => 'hoge',
     *     'class'    => ['c1', 'c2'],
     *     'name'     => 'hoge[]',
     *     'href'     => 'http://hoge',
     *     'hidden'   => true,
     *     'readonly' => false,
     *     'style'    => [
     *         'width'  => '123px',
     *         'height' => '456px',
     *     ],
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\dataformat
     *
     * @param string $selector CSS セレクタ
     * @return array 属性配列
     */
    function css_selector($selector)
    {
        $tag = '';
        $id = '';
        $classes = [];
        $styles = [];
        $attrs = [];

        $context = null;
        $escaping = null;
        $chars = preg_split('##u', $selector, -1, PREG_SPLIT_NO_EMPTY);
        for ($i = 0, $l = count($chars); $i < $l; $i++) {
            $char = $chars[$i];
            if ($char === '"' || $char === "'") {
                $escaping = $escaping === $char ? null : $char;
            }

            if (!$escaping) {
                if ($context !== '{' && $context !== '[') {
                    if ($char === '#') {
                        if (strlen($id)) {
                            throw new \InvalidArgumentException('#id is multiple.');
                        }
                        $context = $char;
                        continue;
                    }
                    if ($char === '.') {
                        $context = $char;
                        $classes[] = '';
                        continue;
                    }
                }
                if ($char === '{') {
                    $context = $char;
                    $styles[] = '';
                    continue;
                }
                if ($char === ';') {
                    $styles[] = '';
                    continue;
                }
                if ($char === '}') {
                    $context = null;
                    continue;
                }
                if ($char === '[') {
                    $context = $char;
                    $attrs[] = '';
                    continue;
                }
                if ($char === ']') {
                    $context = null;
                    continue;
                }
            }

            if ($char === '\\') {
                $char = $chars[++$i];
            }

            if ($context === null) {
                $tag .= $char;
                continue;
            }
            if ($context === '#') {
                $id .= $char;
                continue;
            }
            if ($context === '.') {
                $classes[count($classes) - 1] .= $char;
                continue;
            }
            if ($context === '{') {
                $styles[count($styles) - 1] .= $char;
                continue;
            }
            if ($context === '[') {
                $attrs[count($attrs) - 1] .= $char;
                continue;
            }
        }

        $attrkv = [];
        if (strlen($tag)) {
            $attrkv[''] = $tag;
        }
        if (strlen($id)) {
            $attrkv['id'] = $id;
        }
        if ($classes) {
            $attrkv['class'] = $classes;
        }
        foreach ($styles as $style) {
            $declares = array_filter(array_map('trim', explode(';', $style)), 'strlen');
            foreach ($declares as $declare) {
                [$k, $v] = array_map('trim', explode(':', $declare, 2)) + [1 => null];
                if ($v === null) {
                    throw new \InvalidArgumentException("[$k] is empty.");
                }
                $attrkv['style'][$k] = $v;
            }
        }
        foreach ($attrs as $attr) {
            [$k, $v] = explode('=', $attr, 2) + [1 => true];
            if (array_key_exists($k, $attrkv)) {
                throw new \InvalidArgumentException("[$k] is dumplicated.");
            }
            if ($k[0] === '!') {
                $k = substr($k, 1);
                $v = false;
            }
            $attrkv[$k] = is_string($v) ? json_decode($v) ?? $v : $v;
        }

        return $attrkv;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\date_interval') || (new \ReflectionFunction('ryunosuke\\chmonos\\date_interval'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\date_interval')) {
    /**
     * ISO8601継続時間文字列を DateInterval に変換する
     *
     * 各要素には負数を与えることができる。
     * 秒にはミリ秒を与えることもできる。
     *
     * Example:
     * ```php
     * // 普通のISO8601継続時間
     * that(date_interval('P1Y2M3DT4H5M6S'))->format('%R%Y-%M-%DT%H:%I:%S.%f')->is('+01-02-03T04:05:06.0');
     * // 負数が使える
     * that(date_interval('P1Y2M3DT4H5M-6S'))->format('%R%Y-%M-%DT%H:%I:%S.%f')->is('+01-02-03T04:05:-6.0');
     * // ミリ秒が使える
     * that(date_interval('P1Y2M3DT4H5M6.789S'))->format('%R%Y-%M-%DT%H:%I:%S.%f')->is('+01-02-03T04:05:06.788999');
     * ```
     *
     * @package ryunosuke\Functions\Package\datetime
     *
     * @param string $interval ISO8601継続時間文字列か相対表記
     * @return \DateInterval DateInterval オブジェクト
     */
    function date_interval($interval)
    {
        if (preg_match('#^(?P<S>[\-+])?P((?P<Y>-?\d+)Y)?((?P<M>-?\d+)M)?((?P<D>-?\d+)D)?(T((?P<h>-?\d+)H)?((?P<m>-?\d+)M)?((?P<s>-?\d+(\.\d+)?)S)?)?$#', $interval, $matches, PREG_UNMATCHED_AS_NULL)) {
            $interval = new \DateInterval('P0Y');
            $interval->y = (int) $matches['Y'];
            $interval->m = (int) $matches['M'];
            $interval->d = (int) $matches['D'];
            $interval->h = (int) $matches['h'];
            $interval->i = (int) $matches['m'];
            $interval->s = (int) $matches['s'];
            $interval->f = (float) $matches['s'] - $interval->s;

            if ($matches['S'] === '-') {
                $interval->y = -$interval->y;
                $interval->m = -$interval->m;
                $interval->d = -$interval->d;
                $interval->h = -$interval->h;
                $interval->i = -$interval->i;
                $interval->s = -$interval->s;
                $interval->f = -$interval->f;
            }
        }
        else {
            $parsed = date_parse($interval);
            if ($parsed['errors'] || !$parsed['relative']) {
                throw new \InvalidArgumentException("$interval is invalid DateInterval string");
            }
            $interval = new \DateInterval('P0Y');
            $interval->y = $parsed['relative']['year'];
            $interval->m = $parsed['relative']['month'];
            $interval->d = $parsed['relative']['day'];
            $interval->h = $parsed['relative']['hour'];
            $interval->i = $parsed['relative']['minute'];
            $interval->s = $parsed['relative']['second'];
        }

        $now = new \DateTimeImmutable();
        if ($now > $now->add($interval)) {
            $interval->invert = 1;
            $interval->y = -$interval->y;
            $interval->m = -$interval->m;
            $interval->d = -$interval->d;
            $interval->h = -$interval->h;
            $interval->i = -$interval->i;
            $interval->s = -$interval->s;
            $interval->f = -$interval->f;
        }
        return $interval;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\date_modulate') || (new \ReflectionFunction('ryunosuke\\chmonos\\date_modulate'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\date_modulate')) {
    /**
     * 日時を加減算する
     *
     * フォーマットを維持しつつ日時文字列の最小単位でよしなに加算する。
     * 具体的には Example を参照。
     *
     * Example:
     * ```php
     * // 年加算
     * that(date_modulate('2014', 1))->isSame('2015');
     * // 月加算
     * that(date_modulate('2014/12', 1))->isSame('2015/01');
     * // 日加算
     * that(date_modulate('2014/12/24', 1))->isSame('2014/12/25');
     * // 時加算
     * that(date_modulate('2014/12/24 12', 1))->isSame('2014/12/24 13');
     * // 分加算
     * that(date_modulate('2014/12/24 12:34', 1))->isSame('2014/12/24 12:35');
     * // 秒加算
     * that(date_modulate('2014/12/24 12:34:56', 1))->isSame('2014/12/24 12:34:57');
     * // ミリ秒加算
     * that(date_modulate('2014/12/24 12:34:56.789', 1))->isSame('2014/12/24 12:34:56.790');
     * ```
     *
     * @package ryunosuke\Functions\Package\datetime
     *
     * @param string $datetimedata 日時文字列
     * @param int|string|\DateInterval $modify 加減算値
     * @return string 加算された日時文字列
     */
    function date_modulate($datetimedata, $modify)
    {
        $format = date_parse_format($datetimedata, $parseinfo);
        if ($format === null) {
            throw new \UnexpectedValueException("failed parse date format ($datetimedata)");
        }

        if (is_string($modify) && !ctype_digit(ltrim($modify, '+-'))) {
            $modify = date_interval($modify);
        }

        $dt = new \DateTime();
        $dt->setDate($parseinfo['Y'] ?? 1, $parseinfo['M'] ?? 1, $parseinfo['D'] ?? 1);
        $dt->setTime($parseinfo['h'] ?? 0, $parseinfo['m'] ?? 0, $parseinfo['s'] ?? 0, ($parseinfo['f'] ?? 0) * 1000);
        if ($modify instanceof \DateInterval) {
            $dt->add($modify);
        }
        else {
            $unitmap = [
                'Y' => 'year',
                'M' => 'month',
                'D' => 'day',
                'h' => 'hour',
                'm' => 'minute',
                's' => 'second',
                'f' => 'millisecond',
            ];
            $unit = $unitmap[array_key_last(array_filter($unitmap, fn($key) => $parseinfo[$key] !== null, ARRAY_FILTER_USE_KEY))];
            $dt->modify("$modify $unit");
        }
        return $dt->format($format);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\date_parse_format') || (new \ReflectionFunction('ryunosuke\\chmonos\\date_parse_format'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\date_parse_format')) {
    /**
     * 日時文字列のフォーマットを返す
     *
     * 例えば "2014/12/24 12:34:56" から "Y/m/d H:i:s" を逆算して返す。
     * 精度は非常に低く、相対表現なども未対応（そもそも逆算は一意に決まるものでもない）。
     *
     *  Example:
     * ```php
     * // RFC3339
     * that(date_parse_format('2014-12-24T12:34:56'))->isSame('Y-m-d\TH:i:s');
     * // 日本式
     * that(date_parse_format('2014/12/24 12:34:56'))->isSame('Y/m/d H:i:s');
     * // アメリカ式
     * that(date_parse_format('12/24/2014 12:34:56'))->isSame('m/d/Y H:i:s');
     * // イギリス式
     * that(date_parse_format('24.12.2014 12:34:56'))->isSame('d.m.Y H:i:s');
     * ```
     *
     * @package ryunosuke\Functions\Package\datetime
     *
     * @param string $datetimestring 日時文字列
     * @param array $parsed パースの参考情報が格納される（内部向け）
     * @return ?string フォーマット文字列
     */
    function date_parse_format($datetimestring, &$parsed = [])
    {
        $datetimestring = trim($datetimestring);
        $parsed = (function ($datetimestring) {
            $date_parse = function ($datetimestring) {
                $parsed = date_parse($datetimestring);
                $parsed['datetimestring'] = $datetimestring;
                $parsed += [
                    'has:Y' => $parsed['year'] !== false,
                    'has:M' => $parsed['month'] !== false,
                    'has:D' => $parsed['day'] !== false,
                    'has:h' => $parsed['hour'] !== false,
                    'has:m' => $parsed['minute'] !== false,
                    'has:s' => $parsed['second'] !== false,
                    'has:f' => $parsed['fraction'] !== false,
                    'has:z' => ($parsed['zone'] ?? false) !== false,
                ];
                return $parsed;
            };

            $parsed = $date_parse($datetimestring);

            // エラーがあってもある程度は救うことができる
            if ($parsed['error_count']) {
                // スラッシュの扱いに難があるので統一して再チャレンジ（2014/12 と 2014-12 は扱いがまったく異なる）
                $parsed = $date_parse(str_replace('/', '-', $datetimestring));
                if (!$parsed['error_count']) {
                    $parsed['warnings'][] = 'replace "/" -> "-"';
                    return $parsed;
                }
                // 例えば fraction で誤検知している場合（20140202T123456.789123 は Y:7891 になる）
                if ($parsed['has:Y'] && $parsed['has:M'] && $parsed['has:D'] && $parsed['has:h'] && $parsed['has:m'] && $parsed['has:s'] && $parsed['has:f']) {
                    $rdot = strrpos($datetimestring, '.');
                    if ($rdot !== false) {
                        $parsed = $date_parse(substr($datetimestring, 0, $rdot));
                        if (!$parsed['error_count']) {
                            $parsed['warnings'][] = 'remove fraction';
                            $parsed['fraction'] = '0' . substr($datetimestring, $rdot);
                            return $parsed;
                        }
                    }
                }
                // 例えば minute が足りない場合（20140202T12, 2014-02-02T12 のような分無しはパース自体が失敗する）
                if ($parsed['has:Y'] && $parsed['has:M'] && $parsed['has:D'] && !$parsed['has:h'] && !$parsed['has:m'] && !$parsed['has:s'] && !$parsed['has:f']) {
                    $parsed = $date_parse($datetimestring . ':00');
                    if (!$parsed['error_count']) {
                        $parsed['warnings'][] = 'add minute';
                        return $parsed;
                    }
                }
                return $parsed;
            }

            // 日付ありきとする
            if (!$parsed['has:Y'] && !$parsed['has:M'] && !$parsed['has:D'] && $parsed['has:h'] && $parsed['has:m'] && $parsed['has:s']) {
                // 例えば 201412 は h:20,m:14,s:12 と解釈される
                $parsed = $date_parse($datetimestring . '01T00:00:00');
                if (!$parsed['error_count']) {
                    $parsed['warnings'][] = 'add day';
                    return $parsed;
                }
                // 例えば 2014 は h:20,m:14 と解釈される
                $parsed = $date_parse($datetimestring . '0101T00:00:00');
                if (!$parsed['error_count']) {
                    $parsed['warnings'][] = 'add month,day';
                    return $parsed;
                }
                return $parsed;
            }

            return $parsed;
        })($datetimestring);

        if ($parsed['error_count']) {
            return null;
        }
        // date_parse は妥当でない日付はエラーではなく警告扱い（2015-09-31 等）
        if ($parsed['has:Y'] && $parsed['has:M'] && $parsed['has:D'] && !checkdate($parsed['month'], $parsed['day'], $parsed['year'])) {
            return null;
        }

        // 得られた値でマッチングすれば元となる文字列が取得できる
        $parsed['monthF'] = EN_MONTH_LONG[$parsed['month']] ?? '';
        $parsed['monthM'] = EN_MONTH_SHORT[$parsed['month']] ?? '';
        $parsed['dayS'] = (new \NumberFormatter('en_US', \NumberFormatter::ORDINAL))->format($parsed['day'] ?: 0);
        $parsed['fractionV'] = substr($parsed['fraction'], 2);
        $regex = [
            'Y' => "(?<Y>{$parsed['year']})?          (?<dY>[^0-9a-z]+)?",
            'M' => "(?<M>(0?{$parsed['month']})|({$parsed['monthF']})|({$parsed['monthM']}))? (?<dM>[^0-9]+)?",
            'D' => "(?<D>(0?{$parsed['dayS']})|(0?{$parsed['day']}))?                         (?<dD>[^0-9]+)?",
            'h' => "(?<h>0?{$parsed['hour']})?        (?<dh>[^0-9]+)?",
            'm' => "(?<m>0?{$parsed['minute']})?      (?<dm>[^0-9]+)?",
            's' => "(?<s>0?{$parsed['second']})?      (?<ds>[^0-9]+)?",
            'f' => "(?<f>0?{$parsed['fractionV']}0*)? (?<df>[^0-9]+)?",
            'z' => "(?<z>[+\-]\d{1,2}:?\d{1,2})?      (?<dz>[^0-9]+)?",
        ];
        $formats = [
            'ja-jp' => "^{$regex['Y']}{$regex['M']}{$regex['D']}{$regex['h']}{$regex['m']}{$regex['s']}{$regex['f']}{$regex['z']}$",
            'en-us' => "^{$regex['M']}{$regex['D']}{$regex['Y']}{$regex['h']}{$regex['m']}{$regex['s']}{$regex['f']}{$regex['z']}$",
            'en-gb' => "^{$regex['D']}{$regex['M']}{$regex['Y']}{$regex['h']}{$regex['m']}{$regex['s']}{$regex['f']}{$regex['z']}$",
        ];
        foreach ($formats as $format) {
            if (preg_match("#$format#ixu", $datetimestring, $matches, PREG_UNMATCHED_AS_NULL)) {
                break;
            }
        }
        if (!$matches) {
            $parsed['errors'][] = 'unmatch regex';
            return null;
        }

        $parsed += [
            'Y' => strlen($matches['Y'] ?? '') ? $matches['Y'] : null,
            'M' => strlen($matches['M'] ?? '') ? $matches['M'] : null,
            'D' => strlen($matches['D'] ?? '') ? $matches['D'] : null,
            'h' => strlen($matches['h'] ?? '') ? $matches['h'] : null,
            'm' => strlen($matches['m'] ?? '') ? $matches['m'] : null,
            's' => strlen($matches['s'] ?? '') ? $matches['s'] : null,
            'f' => strlen($matches['f'] ?? '') ? $matches['f'] : null,
            'z' => strlen($matches['z'] ?? '') ? $matches['z'] : null,
        ];

        $parts = array_filter($matches, 'is_string', ARRAY_FILTER_USE_KEY);
        $parts['Y'] = $parsed['Y'] === null ? '' : 'Y';
        $parts['M'] = $parsed['M'] === null ? '' : [1 => 'n', 2 => 'm', 3 => 'M'][strlen($parts['M'])] ?? 'F';
        $parts['D'] = $parsed['D'] === null ? '' : [1 => 'j', 2 => 'd', 3 => 'jS'][strlen($parts['D'])] ?? 'dS';
        $parts['h'] = $parsed['h'] === null ? '' : (strlen($parts['h']) === 1 ? 'G' : 'H');
        $parts['m'] = $parsed['m'] === null ? '' : 'i'; // ゼロなし分フォーマットは存在しない
        $parts['s'] = $parsed['s'] === null ? '' : 's'; // ゼロなし秒フォーマットは存在しない
        $parts['f'] = $parsed['f'] === null ? '' : (strlen($parts['f']) > 3 ? 'u' : 'v');
        $parts['z'] = $parsed['z'] === null ? '' : (strpos($parts['z'], ':') !== false ? 'P' : 'O');

        foreach (['dY', 'dM', 'dD', 'dh', 'dm', 'ds', 'df', 'dz'] as $d) {
            $parts[$d] = implode('', array_map(fn($v) => ctype_alpha($v) ? "\\$v" : $v, str_split($parts[$d] ?? '')));
        }

        return implode('', $parts);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\date_timestamp') || (new \ReflectionFunction('ryunosuke\\chmonos\\date_timestamp'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\date_timestamp')) {
    /**
     * 日時的なものをよしなにタイムスタンプに変換する
     *
     * マイクロ秒にも対応している。つまり返り値は int か float になる。
     * また、相対指定の +1 month の月末問題は起きないようにしてある。
     *
     * かなり適当に和暦にも対応している。
     * さらに必要に迫られてかなり特殊な対応を行っているので Example を参照。
     *
     * Example:
     * ```php
     * // 普通の日時文字列
     * that(date_timestamp('2014/12/24 12:34:56'))->isSame(strtotime('2014/12/24 12:34:56'));
     * // 和暦
     * that(date_timestamp('昭和31年12月24日 12時34分56秒'))->isSame(strtotime('1956/12/24 12:34:56'));
     * // 相対指定
     * that(date_timestamp('2012/01/31 +1 month'))->isSame(strtotime('2012/02/29'));
     * that(date_timestamp('2012/03/31 -1 month'))->isSame(strtotime('2012/02/29'));
     * // マイクロ秒
     * that(date_timestamp('2014/12/24 12:34:56.789'))->isSame(1419392096.789);
     *
     * // ベース日時
     * $baseTimestamp = strtotime('2012/01/31');
     * // ベース日時の25日（strtotime の序数日付は first/last しか対応していないが、この関数は対応している）
     * that(date_timestamp('25th of this month', $baseTimestamp))->isSame(strtotime('2012/01/25'));
     * // ベース日時の第2月曜（strtotime の序数曜日は 1st のような表記に対応していないが、この関数は対応している）
     * that(date_timestamp('2nd monday of this month', $baseTimestamp))->isSame(strtotime('2012/01/09'));
     * ```
     *
     * @package ryunosuke\Functions\Package\datetime
     *
     * @param string|int|float|\DateTimeInterface $datetimedata 日時データ
     * @param int|null $baseTimestamp 日時データ
     * @return int|float|null タイムスタンプ。パース失敗時は null
     */
    function date_timestamp($datetimedata, $baseTimestamp = null)
    {
        if ($datetimedata instanceof \DateTimeInterface) {
            return $datetimedata->getTimestamp() + $datetimedata->format('u') / 1000 / 1000;
        }

        $DAY1 = 60 * 60 * 24;
        $ORDINAL_WORDS = [
            '1st'  => 'first',
            '2nd'  => 'second',
            '3rd'  => 'third',
            '4th'  => 'fourth',
            '5th'  => 'fifth',
            '6th'  => 'sixth',
            '7th'  => 'seventh',
            '8th'  => 'eighth',
            '9th'  => 'ninth',
            '10th' => 'tenth',
            '11th' => 'eleventh',
            '12th' => 'twelfth',
        ];

        $ordinal_day = null;
        $oddeven = null;
        if (is_string($datetimedata) || (is_object($datetimedata) && method_exists($datetimedata, '__toString'))) {
            // 全角を含めた trim
            $chars = "[\\x0-\x20\x7f\xc2\xa0\xe3\x80\x80]";
            $datetimedata = preg_replace("/\A{$chars}++|{$chars}++\z/u", '', $datetimedata);

            // 和暦を西暦に置換
            $jpnames = array_merge(array_column(JP_ERA, 'name'), array_column(JP_ERA, 'abbr'));
            $datetimedata = preg_replace_callback('/^(' . implode('|', $jpnames) . ')(\d{1,2}|元)/u', function ($matches) {
                [, $era, $year] = $matches;
                $eratime = array_find_first(JP_ERA, function ($v) use ($era) {
                    if (in_array($era, [$v['name'], $v['abbr']], true)) {
                        return $v['since'];
                    }
                }, false);
                return idate('Y', $eratime) + ($year === '元' ? 1 : $year) - 1;
            }, $datetimedata);

            // 単位文字列を置換
            $datetimedata = strtr($datetimedata, [
                '　'    => ' ',
                '西暦' => '',
                '年'   => '/',
                '月'   => '/',
                '日'   => ' ',
                '時'   => ':',
                '分'   => ':',
                '秒'   => '',
            ]);
            $datetimedata = trim($datetimedata, " \t\n\r\0\x0B:/");

            // 1st, 2nd, 3rd, 4th dayname の対応
            $datetimedata = preg_replace_callback('#((\d{1,2})(st|nd|rd|th))(\s+(sun|mon|tues?|wed(nes)?|thu(rs)?|fri|sat(ur)?)day)#u', function ($matches) use ($ORDINAL_WORDS) {
                if (!isset($ORDINAL_WORDS[$matches[1]])) {
                    return $matches[0];
                }

                return $ORDINAL_WORDS[$matches[1]] . $matches[4];
            }, $datetimedata);

            // 1st, 2nd, 3rd, 4th day の対応
            $datetimedata = preg_replace_callback('#((\d{1,2})(st|nd|rd|th))(\s+day)?#ui', function ($matches) use (&$ordinal_day) {
                if ($matches[1] !== (new \NumberFormatter('en', \NumberFormatter::ORDINAL))->format($matches[2])) {
                    return $matches[0];
                }

                $ordinal_day = $matches[2];
                return 'first day';
            }, $datetimedata);

            // odd, even の対応
            $datetimedata = preg_replace_callback('#(odd|even)\s+#ui', function ($matches) use (&$oddeven) {
                $oddeven = $matches[1];
                return 'this ';
            }, $datetimedata);
        }

        // 数値4桁は年と解釈されるように
        if (preg_match('/^[0-9]{4}$/', $datetimedata)) {
            $datetimedata .= '-01-01';
        }

        // 数値系はタイムスタンプとみなす
        if (ctype_digit("$datetimedata")) {
            return (int) $datetimedata;
        }
        if (is_numeric($datetimedata)) {
            return (float) $datetimedata;
        }

        // strtotime と date_parse の合せ技で変換
        $baseTimestamp ??= time();
        $timestamp = strtotime($datetimedata, $baseTimestamp);
        $parts = date_parse($datetimedata);
        if ($timestamp === false || $parts['error_count']) {
            return null;
        }

        if (!checkdate($parts['month'], $parts['day'], $parts['year'])) {
            if (!isset($parts['relative'])) {
                return null;
            }
            $parts['year'] = idate('Y', $baseTimestamp);
            $parts['month'] = idate('m', $baseTimestamp);
            $parts['day'] = idate('d', $baseTimestamp);
        }

        if ($ordinal_day) {
            $timestamp += ($ordinal_day - 1) * $DAY1;
        }

        if ($oddeven !== null) {
            $idateW2 = idate('W', $timestamp) % 2;
            if (($oddeven === 'odd' && $idateW2 === 0) || ($oddeven === 'even' && $idateW2 === 1)) {
                $timestamp += $DAY1 * 7;
            }
        }

        $relative = $parts['relative'] ?? [];
        if (true
            && !isset($relative['weekday'])            // 週指定があるとかなり特殊で初日末日が意味を為さない
            && !isset($relative['first_day_of_month']) // first day 指定があるなら初日確定
            && !isset($relative['last_day_of_month'])  // last day 指定があるなら末日確定
        ) {
            if ($relative['year'] ?? false) {
                $parts['year'] += $relative['year'];
            }
            if ($relative['month'] ?? false) {
                $parts['month'] += $relative['month'];
                $parts['year'] += intdiv($parts['month'], 12);
                $parts['month'] %= 12;
                $parts['month'] += $parts['month'] <= 0 ? 12 : 0;
            }

            if (!checkdate($parts['month'], $parts['day'], $parts['year'])) {
                $timestamp = strtotime(date('Y-m-t H:i:s', $timestamp - $DAY1 * 4));
            }
        }

        if ($parts['fraction']) {
            $timestamp += ($timestamp >= 0 ? +$parts['fraction'] : -$parts['fraction']);
        }
        return $timestamp;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\error') || (new \ReflectionFunction('ryunosuke\\chmonos\\error'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\error')) {
    /**
     * エラー出力する
     *
     * 第1引数 $message はそれらしく文字列化されて出力される。基本的にはあらゆる型を与えて良い。
     *
     * 第2引数 $destination で出力対象を指定する。省略すると error_log 設定に従う。
     * 文字列を与えるとファイル名とみなし、ファイルに追記される。
     * ファイルを開くが、**ファイルは閉じない**。閉じ処理は php の終了処理に身を任せる。
     * したがって閉じる必要がある場合はファイルポインタを渡す必要がある。
     *
     * @package ryunosuke\Functions\Package\errorfunc
     *
     * @param string|mixed $message 出力メッセージ
     * @param resource|string|mixed $destination 出力先
     * @return int 書き込んだバイト数
     */
    function error($message, $destination = null)
    {
        static $persistences = [];

        $time = date('d-M-Y H:i:s e');
        $content = stringify($message);
        $location = '';
        if (!($message instanceof \Exception || $message instanceof \Throwable)) {
            foreach (debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS) as $trace) {
                if (isset($trace['file'], $trace['line'])) {
                    $location = " in {$trace['file']} on line {$trace['line']}";
                    break;
                }
            }
        }
        $line = "[$time] PHP Log:  $content$location\n";

        if ($destination === null) {
            $destination = blank_if(ini_get('error_log'), 'php://stderr');
        }

        if ($destination === 'syslog') {
            syslog(LOG_INFO, $message);
            return strlen($line);
        }

        if (is_resource($destination)) {
            $fp = $destination;
        }
        elseif (is_string($destination)) {
            if (!isset($persistences[$destination])) {
                $persistences[$destination] = fopen($destination, 'a');
            }
            $fp = $persistences[$destination];
        }

        if (empty($fp)) {
            throw new \InvalidArgumentException('$destination must be resource or string.');
        }

        flock($fp, LOCK_EX);
        fwrite($fp, $line);
        flock($fp, LOCK_UN);

        return strlen($line);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\dirmtime') || (new \ReflectionFunction('ryunosuke\\chmonos\\dirmtime'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\dirmtime')) {
    /**
     * ディレクトリの最終更新日時を返す
     *
     * 「ディレクトリの最終更新日時」とは filemtime で得られる結果ではなく、「配下のファイル群で最も新しい日時」を表す。
     * ディレクトリの mtime も検出に含まれるので、ファイルを削除した場合も検知できる。
     *
     * ファイル名を与えると例外を投げる。
     * 空ディレクトリの場合は自身の mtime を返す。
     *
     * Example:
     * ```php
     * $dirname = sys_get_temp_dir() . '/mtime';
     * rm_rf($dirname);
     * mkdir($dirname);
     *
     * // この時点では現在日時（単純に自身の更新日時）
     * that(dirmtime($dirname))->isBetween(time() - 2, time());
     * // ファイルを作って更新するとその時刻
     * touch("$dirname/tmp", time() + 10);
     * that(dirmtime($dirname))->isSame(time() + 10);
     * ```
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $dirname ディレクトリ名
     * @param bool $recursive 再帰フラグ
     * @return int 最終更新日時
     */
    function dirmtime($dirname, $recursive = true)
    {
        if (!is_dir($dirname)) {
            throw new \InvalidArgumentException("'$dirname' is not directory.");
        }

        $rdi = new \RecursiveDirectoryIterator($dirname, \FilesystemIterator::SKIP_DOTS);
        $dirtime = filemtime($dirname);
        foreach ($rdi as $path) {
            /** @var \SplFileInfo $path */
            $mtime = $path->getMTime();
            if ($path->isDir() && $recursive) {
                $mtime = max($mtime, dirmtime($path->getPathname(), $recursive));
            }
            if ($dirtime < $mtime) {
                $dirtime = $mtime;
            }
        }
        return $dirtime;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\file_list') || (new \ReflectionFunction('ryunosuke\\chmonos\\file_list'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\file_list')) {
    /**
     * ファイル一覧を配列で返す
     *
     * Example:
     * ```php
     * // 適当にファイルを用意
     * $DS = DIRECTORY_SEPARATOR;
     * $tmp = sys_get_temp_dir() . "{$DS}file_list";
     * rm_rf($tmp, false);
     * file_set_contents("$tmp/a.txt", 'a');
     * file_set_contents("$tmp/dir/b.txt", 'b');
     * file_set_contents("$tmp/dir/dir/c.txt", 'c');
     * // ファイル一覧が取得できる
     * that(file_list($tmp))->equalsCanonicalizing([
     *     "$tmp{$DS}a.txt",
     *     "$tmp{$DS}dir{$DS}b.txt",
     *     "$tmp{$DS}dir{$DS}dir{$DS}c.txt",
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $dirname 調べるディレクトリ名
     * @param array $filter_condition フィルタ条件
     * @return ?array ファイルの配列
     */
    function file_list($dirname, $filter_condition = [])
    {
        $filter_condition += [
            'unixpath' => false,
            '!type'    => 'dir',

            'recursive' => true,
            'relative'  => false,
            'nesting'   => false,
        ];

        $dirname = path_normalize($dirname);

        $subpath = '';
        while (!is_dir($dirname) && str_exists(basename($dirname), ['*', '?', '!', '{', '}', '[', ']'])) {
            $subpath = basename($dirname) . (strlen($subpath) ? '/' : '') . $subpath;
            $dirname = dirname($dirname);
        }

        if (strlen($subpath)) {
            if (strlen($filter_condition['subpath'] ?? '')) {
                throw new \InvalidArgumentException("both subpath and subpattern are specified");
            }
            $filter_condition['subpath'] = $subpath;
            $filter_condition['fnmflag'] = FNM_PATHNAME;
            $filter_condition['unixpath'] = true;
        }

        if (!file_exists($dirname) || $dirname === dirname($dirname)) {
            return null;
        }

        $match = file_matcher($filter_condition);

        $DS = DIRECTORY_SEPARATOR;
        $opt = \FilesystemIterator::SKIP_DOTS | \FilesystemIterator::KEY_AS_PATHNAME | \FilesystemIterator::CURRENT_AS_SELF;

        if ($filter_condition['unixpath']) {
            $DS = '/';
            $opt |= \FilesystemIterator::UNIX_PATHS;
        }

        $rdi = new \RecursiveDirectoryIterator($dirname, $opt);

        if ($filter_condition['recursive']) {
            $iterator = new \RecursiveIteratorIterator($rdi, \RecursiveIteratorIterator::CHILD_FIRST);
        }
        else {
            $iterator = $rdi;
        }

        $result = [];
        foreach ($iterator as $fullpath => $it) {
            if (!$match($it)) {
                continue;
            }

            $path = $filter_condition['relative'] ? $it->getSubPathName() : $fullpath;
            $path = strtr(is_dir($fullpath) ? $path . $DS : $path, [DIRECTORY_SEPARATOR => $DS]);

            if ($filter_condition['nesting']) {
                $tmp = &$result;
                foreach (array_filter(multiexplode(['/', DIRECTORY_SEPARATOR], $it->getSubPath()), 'strlen') as $subdir) {
                    $tmp = &$tmp[$subdir];
                }
                if ($it->isDir()) {
                    $tmp[$it->getFilename()] = $tmp[$it->getFilename()] ?? [];
                }
                else {
                    $tmp[$it->getFilename()] = $path;
                }
            }
            else {
                $result[] = $path;
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\file_matcher') || (new \ReflectionFunction('ryunosuke\\chmonos\\file_matcher'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\file_matcher')) {
    /**
     * 各種属性を指定してファイルのマッチングを行うクロージャを返す
     *
     * ※ 内部向け
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param array $filter_condition マッチャーコンディション配列（ソースを参照）
     * @return \Closure ファイルマッチャー
     */
    function file_matcher(array $filter_condition)
    {
        $filter_condition += [
            // common
            'dotfile'    => null,  // switch startWith "."
            'unixpath'   => true,  // convert "\\" -> "/"
            'casefold'   => false, // ignore case
            'fnmflag'    => 0,     // FNM_*
            // by getType (string or [string])
            'type'       => null,
            '!type'      => null,
            // by getPerms (int)
            'perms'      => null,
            '!perms'     => null,
            // by getMTime (int or [int, int])
            'mtime'      => null,
            '!mtime'     => null,
            // by getSize (int or [int, int])
            'size'       => null,
            '!size'      => null,
            // by getPathname (glob or regex)
            'path'       => null,
            '!path'      => null,
            // by getSubPath (glob or regex)
            'subpath'    => null,
            '!subpath'   => null,
            // by getPath or getSubpath (glob or regex)
            'dir'        => null,
            '!dir'       => null,
            // by getFilename (glob or regex)
            'name'       => null,
            '!name'      => null,
            // by getBasename (glob or regex)
            'basename'   => null,
            '!basename'  => null,
            // by getExtension (string or [string])
            'extension'  => null,
            '!extension' => null,
            // by contents (string)
            'contains'   => null,
            '!contains'  => null,
            // by custom condition (callable)
            'filter'     => null,
            '!filter'    => null,
        ];

        foreach ([
            'mtime'  => fn(...$args) => date_timestamp(...$args),
            '!mtime' => fn(...$args) => date_timestamp(...$args),
            'size'   => fn(...$args) => si_unprefix(...$args),
            '!size'  => fn(...$args) => si_unprefix(...$args),
        ] as $key => $map) {
            if (isset($filter_condition[$key])) {
                $range = $filter_condition[$key];
                if (!is_array($range)) {
                    $range = array_fill_keys([0, 1], $range);
                }
                $range = array_map($map, $range);
                $filter_condition[$key] = static function ($value) use ($range) {
                    return (!isset($range[0]) || $value >= $range[0]) && (!isset($range[1]) || $value <= $range[1]);
                };
            }
        }

        foreach ([
            'type'       => null,
            '!type'      => null,
            'extension'  => null,
            '!extension' => null,
        ] as $key => $map) {
            if (isset($filter_condition[$key])) {
                $array = array_flip((array) $filter_condition[$key]);
                if ($filter_condition['casefold']) {
                    $array = array_change_key_case($array, CASE_LOWER);
                }
                $filter_condition[$key] = static function ($value) use ($array) {
                    return isset($array[$value]);
                };
            }
        }

        foreach ([
            'path'      => null,
            '!path'     => null,
            'subpath'   => null,
            '!subpath'  => null,
            'dir'       => null,
            '!dir'      => null,
            'name'      => null,
            '!name'     => null,
            'basename'  => null,
            '!basename' => null,
        ] as $key => $convert) {
            if (isset($filter_condition[$key])) {
                $callback = fn() => false;
                foreach (arrayize($filter_condition[$key]) as $pattern) {
                    preg_match('##', ''); // clear preg_last_error
                    @preg_match($pattern, '');
                    if (preg_last_error() === PREG_NO_ERROR) {
                        $callback = static function ($string) use ($callback, $pattern, $filter_condition) {
                            if ($callback($string)) {
                                return true;
                            }
                            $string = $filter_condition['unixpath'] && DIRECTORY_SEPARATOR === '\\' ? str_replace('\\', '/', $string) : $string;
                            return !!preg_match($pattern, $string);
                        };
                    }
                    else {
                        $callback = static function ($string) use ($callback, $pattern, $filter_condition) {
                            if ($callback($string)) {
                                return true;
                            }
                            if ($filter_condition['unixpath'] && DIRECTORY_SEPARATOR === '\\') {
                                $pattern = str_replace('\\', '/', $pattern);
                                $string = str_replace('\\', '/', $string);
                            }
                            $flags = $filter_condition['fnmflag'];
                            $flags |= $filter_condition['casefold'] ? FNM_CASEFOLD : 0;
                            $flags &= ~((strpos($pattern, '**') !== false) ? FNM_PATHNAME : 0);
                            return fnmatch($pattern, $string, $flags);
                        };
                    }
                }
                $filter_condition[$key] = $callback;
            }
        }

        return function ($file) use ($filter_condition) {
            if (!$file instanceof \SplFileInfo) {
                $file = new \SplFileInfo($file);
            }

            if (isset($filter_condition['dotfile']) && !$filter_condition['dotfile'] === (strpos($file->getFilename(), '.') === 0)) {
                return false;
            }

            foreach (['type' => false, '!type' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && (!file_exists($file->getPathname()) || $cond === $filter_condition[$key]($file->getType()))) {
                    return false;
                }
            }
            foreach (['perms' => false, '!perms' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && (!file_exists($file->getPathname()) || $cond === !!($filter_condition[$key] & $file->getPerms()))) {
                    return false;
                }
            }
            foreach (['mtime' => false, '!mtime' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && (!file_exists($file->getPathname()) || $cond === $filter_condition[$key]($file->getMTime()))) {
                    return false;
                }
            }
            foreach (['size' => false, '!size' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && (!file_exists($file->getPathname()) || $cond === $filter_condition[$key]($file->getSize()))) {
                    return false;
                }
            }
            foreach (['path' => false, '!path' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && $cond === $filter_condition[$key]($file->getPathname())) {
                    return false;
                }
            }
            foreach (['subpath' => false, '!subpath' => true] as $key => $cond) {
                $subpath = $file instanceof \RecursiveDirectoryIterator ? $file->getSubPathname() : $file->getPathname();
                if (isset($filter_condition[$key]) && $cond === $filter_condition[$key]($subpath)) {
                    return false;
                }
            }
            foreach (['dir' => false, '!dir' => true] as $key => $cond) {
                $dirname = $file instanceof \RecursiveDirectoryIterator ? $file->getSubPath() : $file->getPath();
                if (isset($filter_condition[$key]) && $cond === $filter_condition[$key]($dirname)) {
                    return false;
                }
            }
            foreach (['name' => false, '!name' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && $cond === $filter_condition[$key]($file->getFilename())) {
                    return false;
                }
            }
            foreach (['basename' => false, '!basename' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && $cond === $filter_condition[$key]($file->getBasename(concat('.', $file->getExtension())))) {
                    return false;
                }
            }
            foreach (['extension' => false, '!extension' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && $cond === $filter_condition[$key]($file->getExtension())) {
                    return false;
                }
            }
            foreach (['filter' => false, '!filter' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && $cond === !!$filter_condition[$key]($file)) {
                    return false;
                }
            }
            foreach (['contains' => false, '!contains' => true] as $key => $cond) {
                if (isset($filter_condition[$key]) && (!file_exists($file->getPathname()) || $cond === (file_pos($file->getPathname(), $filter_condition[$key]) !== null))) {
                    return false;
                }
            }

            return true;
        };
    }
}

assert(!function_exists('ryunosuke\\chmonos\\file_pos') || (new \ReflectionFunction('ryunosuke\\chmonos\\file_pos'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\file_pos')) {
    /**
     * 範囲指定でファイルを読んで位置を返す
     *
     * $needle に配列を与えると OR 的動作で一つでも見つかった時点の位置を返す。
     * このとき「どれが見つかったか？」は得られない（場合によっては不便なので将来の改修対象）。
     *
     * Example:
     * ```php
     * // 適当にファイルを用意
     * $testpath = sys_get_temp_dir() . '/file_pos.txt';
     * file_put_contents($testpath, "hoge\nfuga\npiyo\nfuga");
     * // fuga の位置を返す
     * that(file_pos($testpath, 'fuga'))->is(5);
     * // 2つ目の fuga の位置を返す
     * that(file_pos($testpath, 'fuga', 6))->is(15);
     * // 見つからない場合は false を返す
     * that(file_pos($testpath, 'hogera'))->is(null);
     * ```
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $filename ファイル名
     * @param string|array $needle 探す文字列
     * @param int $start 読み込み位置
     * @param int|null $end 読み込むまでの位置。省略時は指定なし（最後まで）。負数は後ろからのインデックス
     * @param int|null $chunksize 読み込みチャンクサイズ。省略時は 4096 の倍数に正規化
     * @return ?int $needle の位置。見つからなかった場合は null
     */
    function file_pos($filename, $needle, $start = 0, $end = null, $chunksize = null)
    {
        if (!is_file($filename)) {
            throw new \InvalidArgumentException("'$filename' is not found.");
        }

        $needle = arrayval($needle, false);
        $maxlength = max(array_map('strlen', $needle));

        if ($start < 0) {
            $start += $filesize ?? $filesize = filesize($filename);
        }
        if ($end === null) {
            $end = $filesize ?? $filesize = filesize($filename);
        }
        if ($end < 0) {
            $end += $filesize ?? $filesize = filesize($filename);
        }
        if ($chunksize === null) {
            $chunksize = 4096 * ($maxlength % 4096 + 1);
        }

        assert(isset($filesize) || !isset($filesize));
        assert($chunksize >= $maxlength);

        $fp = fopen($filename, 'rb');
        try {
            fseek($fp, $start);
            while (!feof($fp)) {
                if ($start > $end) {
                    break;
                }
                $last = $part ?? '';
                $part = fread($fp, $chunksize);
                if (($p = strpos_array($part, $needle))) {
                    $min = min($p);
                    $result = $start + $min;
                    return $result + strlen($needle[array_flip($p)[$min]]) > $end ? false : $result;
                }
                if (($p = strpos_array($last . $part, $needle))) {
                    $min = min($p);
                    $result = $start + $min - strlen($last);
                    return $result + strlen($needle[array_flip($p)[$min]]) > $end ? false : $result;
                }
                $start += strlen($part);
            }
            return null;
        }
        finally {
            fclose($fp);
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\file_set_contents') || (new \ReflectionFunction('ryunosuke\\chmonos\\file_set_contents'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\file_set_contents')) {
    /**
     * ディレクトリも掘る file_put_contents
     *
     * 書き込みは一時ファイルと rename を使用してアトミックに行われる。
     *
     * Example:
     * ```php
     * file_set_contents(sys_get_temp_dir() . '/not/filename.ext', 'hoge');
     * that(file_get_contents(sys_get_temp_dir() . '/not/filename.ext'))->isSame('hoge');
     * ```
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $filename 書き込むファイル名
     * @param string $data 書き込む内容
     * @param int $umask ディレクトリを掘る際の umask
     * @return ?int 書き込まれたバイト数
     */
    function file_set_contents($filename, $data, $umask = 0002)
    {
        if (func_num_args() === 2) {
            $umask = umask();
        }

        $filename = path_normalize($filename);

        if (!is_dir($dirname = dirname($filename))) {
            if (!@mkdir_p($dirname, $umask)) {
                throw new \RuntimeException("failed to mkdir($dirname)");
            }
        }

        error_clear_last();
        $tempnam = @tempnam($dirname, 'tmp');
        if (strpos(error_get_last()['message'] ?? '', "file created in the system's temporary directory") !== false) {
            $result = file_put_contents($filename, $data);
            @chmod($filename, 0666 & ~$umask);
            return $result === false ? null : $result;
        }
        if (($result = file_put_contents($tempnam, $data)) !== false) {
            if (rename($tempnam, $filename)) {
                @chmod($filename, 0666 & ~$umask);
                return $result === false ? null : $result;
            }
            unlink($tempnam);
        }
        return null;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\mkdir_p') || (new \ReflectionFunction('ryunosuke\\chmonos\\mkdir_p'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\mkdir_p')) {
    /**
     * ディレクトリを再帰的に掘る
     *
     * 既に存在する場合は何もしない（エラーも出さない）。
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $dirname ディレクトリ名
     * @param int $umask ディレクトリを掘る際の umask
     * @return bool 作成したら true
     */
    function mkdir_p($dirname, $umask = 0002)
    {
        if (func_num_args() === 1) {
            $umask = umask();
        }

        if (file_exists($dirname)) {
            return false;
        }

        return mkdir($dirname, 0777 & (~$umask), true);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\path_is_absolute') || (new \ReflectionFunction('ryunosuke\\chmonos\\path_is_absolute'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\path_is_absolute')) {
    /**
     * パスが絶対パスか判定する
     *
     * Example:
     * ```php
     * that(path_is_absolute('/absolute/path'))->isTrue();
     * that(path_is_absolute('relative/path'))->isFalse();
     * // Windows 環境では下記も true になる
     * if (DIRECTORY_SEPARATOR === '\\') {
     *     that(path_is_absolute('\\absolute\\path'))->isTrue();
     *     that(path_is_absolute('C:\\absolute\\path'))->isTrue();
     * }
     * ```
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $path パス文字列
     * @return bool 絶対パスなら true
     */
    function path_is_absolute($path)
    {
        // スキームが付いている場合は path 部分で判定
        $parts = parse_url($path);
        if (isset($parts['scheme'], $parts['path'])) {
            $path = $parts['path'];
        }
        elseif (isset($parts['scheme'], $parts['host'])) {
            $path = $parts['host'];
        }

        if (substr($path, 0, 1) === '/') {
            return true;
        }

        if (DIRECTORY_SEPARATOR === '\\') {
            if (preg_match('#^([a-z]+:(\\\\|/|$)|\\\\)#i', $path) !== 0) {
                return true;
            }
        }

        return false;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\path_normalize') || (new \ReflectionFunction('ryunosuke\\chmonos\\path_normalize'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\path_normalize')) {
    /**
     * パスを正規化する
     *
     * 具体的には ./ や ../ を取り除いたり連続したディレクトリ区切りをまとめたりする。
     * realpath ではない。のでシンボリックリンクの解決などはしない。その代わりファイルが存在しなくても使用することができる。
     *
     * Example:
     * ```php
     * $DS = DIRECTORY_SEPARATOR;
     * that(path_normalize('/path/to/something'))->isSame("{$DS}path{$DS}to{$DS}something");
     * that(path_normalize('/path/through/../something'))->isSame("{$DS}path{$DS}something");
     * that(path_normalize('./path/current/./through/../something'))->isSame("path{$DS}current{$DS}something");
     * ```
     *
     * @package ryunosuke\Functions\Package\filesystem
     *
     * @param string $path パス文字列
     * @return string 正規化されたパス
     */
    function path_normalize($path)
    {
        $DS = DIRECTORY_SEPARATOR;

        // スキームの保護
        $with_scheme = false;
        $scheme = parse_url($path, PHP_URL_SCHEME);
        if (!($scheme === null || $scheme === 'file') && substr($path, strlen($scheme), 3) === '://') {
            $path = substr($path, strlen($scheme) + 3);
            $DS = '/';
            $with_scheme = true;
        }

        $delimiter = '/';
        if ($DS === '\\') {
            $delimiter .= '\\\\';
        }

        $result = [];
        foreach (preg_split("#[$delimiter]+#u", $path) as $part) {
            if ($part === '.') {
                continue;
            }
            if ($part === '..') {
                if (empty($result)) {
                    throw new \InvalidArgumentException("'$path' is invalid as path string.");
                }
                array_pop($result);
                continue;
            }
            $result[] = $part;
        }
        if (count($result) > 2 && $result[count($result) - 1] === '') {
            array_pop($result);
        }

        $path = implode($DS, $result);

        if ($with_scheme) {
            $path = "$scheme://$path";
        }

        return $path;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\func_user_func_array') || (new \ReflectionFunction('ryunosuke\\chmonos\\func_user_func_array'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\func_user_func_array')) {
    /**
     * パラメータ定義数に応じて呼び出し引数を可変にしてコールする
     *
     * デフォルト引数はカウントされない。必須パラメータの数で呼び出す。
     *
     * $callback に null を与えると例外的に「第1引数を返すクロージャ」を返す。
     *
     * php の標準関数は定義数より多い引数を投げるとエラーを出すのでそれを抑制したい場合に使う。
     *
     * Example:
     * ```php
     * // strlen に2つの引数を渡してもエラーにならない
     * $strlen = func_user_func_array('strlen');
     * that($strlen('abc', null))->isSame(3);
     * ```
     *
     * @package ryunosuke\Functions\Package\funchand
     *
     * @param callable|null $callback 呼び出すクロージャ
     * @return callable 引数ぴったりで呼び出すクロージャ
     */
    function func_user_func_array($callback)
    {
        // null は第1引数を返す特殊仕様
        if ($callback === null) {
            return fn($v) => $v;
        }
        // クロージャはユーザ定義しかありえないので調べる必要がない
        if ($callback instanceof \Closure) {
            // と思ったが、\Closure::fromCallable で作成されたクロージャは内部属性が伝播されるようなので除外
            if (reflect_callable($callback)->isUserDefined()) {
                return $callback;
            }
        }

        // 上記以外は「引数ぴったりで削ぎ落としてコールするクロージャ」を返す
        $plength = parameter_length($callback, true, true);
        return function (...$args) use ($callback, $plength) {
            if (is_infinite($plength)) {
                return $callback(...$args);
            }
            return $callback(...array_slice($args, 0, $plength));
        };
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_bindable_closure') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_bindable_closure'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_bindable_closure')) {
    /**
     * $this を bind 可能なクロージャか調べる
     *
     * Example:
     * ```php
     * that(is_bindable_closure(function () {}))->isTrue();
     * that(is_bindable_closure(static function () {}))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\funchand
     *
     * @param \Closure $closure 調べるクロージャ
     * @return bool $this を bind 可能なクロージャなら true
     */
    function is_bindable_closure(\Closure $closure)
    {
        return !!@$closure->bindTo(new \stdClass());
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_callback') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_callback'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_callback')) {
    /**
     * callable のうち、関数文字列を false で返す
     *
     * 歴史的な経緯で php の callable は多岐に渡る。
     *
     * 1. 単純なコールバック: `"strtolower"`
     * 2. staticメソッドのコール: `["ClassName", "method"]`
     * 3. オブジェクトメソッドのコール: `[$object, "method"]`
     * 4. staticメソッドのコール: `"ClassName::method"`
     * 5. 相対指定によるstaticメソッドのコール: `["ClassName", "parent::method"]`
     * 6. __invoke実装オブジェクト: `$object`
     * 7. クロージャ: `fn() => something()`
     *
     * 上記のうち 1 を callable とはみなさず false を返す。
     * 現代的には `Closure::fromCallable`, `$object->method(...)` などで callable == Closure という概念が浸透しているが、そうでないこともある。
     * 本ライブラリでも `preg_splice` や `array_sprintf` などで頻出しているので関数として定義する。
     *
     * 副作用はなく、クラスのロードや関数の存在チェックなどは行わない。あくまで型と形式で判定する。
     * 引数は callable でなくても構わない。その場合単に false を返す。
     *
     * @package ryunosuke\Functions\Package\funchand
     *
     * @param mixed $callable 対象 callable
     * @return bool 関数呼び出しの callable なら false
     */
    function is_callback($callable)
    {
        // 大前提（不要に思えるが invoke や配列 [1, 2, 3] などを考慮すると必要）
        if (!is_callable($callable, true)) {
            return false;
        }

        // 変なオブジェクト・配列は↑で除かれている
        if (is_object($callable) || is_array($callable)) {
            return true;
        }

        // 文字列で :: を含んだら関数呼び出しではない
        if (is_string($callable) && strpos($callable, '::') !== false) {
            return true;
        }

        return false;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\get_uploaded_files') || (new \ReflectionFunction('ryunosuke\\chmonos\\get_uploaded_files'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\get_uploaded_files')) {
    /**
     * $_FILES の構造を組み替えて $_POST などと同じにする
     *
     * $_FILES の配列構造はバグとしか思えないのでそれを是正する関数。
     * 第1引数 $files は指定可能だが、大抵は $_FILES であり、指定するのはテスト用。
     *
     * サンプルを書くと長くなるので例は{@source \ryunosuke\Test\Package\UtilityTest::test_get_uploaded_files() テストファイル}を参照。
     *
     * @package ryunosuke\Functions\Package\info
     *
     * @param ?array $files $_FILES の同じ構造の配列。省略時は $_FILES
     * @return array $_FILES を $_POST などと同じ構造にした配列
     */
    function get_uploaded_files($files = null)
    {
        $result = [];
        foreach (($files ?: $_FILES) as $name => $file) {
            if (is_array($file['name'])) {
                $file = get_uploaded_files(array_each($file['name'], function (&$carry, $dummy, $subkey) use ($file) {
                    $carry[$subkey] = array_lookup($file, $subkey);
                }, []));
            }
            $result[$name] = $file;
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\evaluate') || (new \ReflectionFunction('ryunosuke\\chmonos\\evaluate'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\evaluate')) {
    /**
     * eval のプロキシ関数
     *
     * 一度ファイルに吐いてから require した方が opcache が効くので抜群に速い。
     * また、素の eval は ParseError が起こったときの表示がわかりにくすぎるので少し見やすくしてある。
     *
     * 関数化してる以上 eval におけるコンテキストの引き継ぎはできない。
     * ただし、引数で変数配列を渡せるようにしてあるので get_defined_vars を併用すれば基本的には同じ（$this はどうしようもない）。
     *
     * 短いステートメントだと opcode が少ないのでファイルを経由せず直接 eval したほうが速いことに留意。
     * 一応引数で指定できるようにはしてある。
     *
     * Example:
     * ```php
     * $a = 1;
     * $b = 2;
     * $phpcode = ';
     * $c = $a + $b;
     * return $c * 3;
     * ';
     * that(evaluate($phpcode, get_defined_vars()))->isSame(9);
     * ```
     *
     * @package ryunosuke\Functions\Package\misc
     *
     * @param string $phpcode 実行する php コード
     * @param array $contextvars コンテキスト変数配列
     * @param int $cachesize キャッシュするサイズ
     * @return mixed eval の return 値
     */
    function evaluate($phpcode, $contextvars = [], $cachesize = 256)
    {
        $cachefile = null;
        if ($cachesize && strlen($phpcode) >= $cachesize) {
            $cachefile = function_configure('storagedir') . '/' . rawurlencode(__FUNCTION__) . '-' . sha1($phpcode) . '.php';
            if (!file_exists($cachefile)) {
                file_put_contents($cachefile, "<?php $phpcode", LOCK_EX);
            }
        }

        try {
            if ($cachefile) {
                /** @noinspection PhpMethodParametersCountMismatchInspection */
                return (static function () {
                    extract(func_get_arg(1));
                    return require func_get_arg(0);
                })($cachefile, $contextvars);
            }
            else {
                /** @noinspection PhpMethodParametersCountMismatchInspection */
                return (static function () {
                    extract(func_get_arg(1));
                    return eval(func_get_arg(0));
                })($phpcode, $contextvars);
            }
        }
        catch (\ParseError $ex) {
            $errline = $ex->getLine();
            $errline_1 = $errline - 1;
            $codes = preg_split('#\\R#u', $phpcode);
            $codes[$errline_1] = '>>> ' . $codes[$errline_1];

            $N = 5; // 前後の行数
            $message = $ex->getMessage();
            $message .= "\n" . implode("\n", array_slice($codes, max(0, $errline_1 - $N), $N * 2 + 1));
            if ($cachefile) {
                $message .= "\n in " . realpath($cachefile) . " on line " . $errline . "\n";
            }
            throw new \ParseError($message, $ex->getCode(), $ex);
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\php_parse') || (new \ReflectionFunction('ryunosuke\\chmonos\\php_parse'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\php_parse')) {
    /**
     * php のコード断片をパースする
     *
     * @todo そもそも何がしたいのかよくわからない関数になってきたので動作の洗い出しが必要
     *
     * Example:
     * ```php
     * $phpcode = '<?php
     * namespace Hogera;
     * class Example
     * {
     *     // something
     * }';
     *
     * // namespace ～ ; を取得
     * $part = php_parse($phpcode, [
     *     'begin' => T_NAMESPACE,
     *     'end'   => ';',
     * ]);
     * that(implode('', array_column($part, 'text')))->isSame('namespace Hogera;');
     *
     * // class ～ { を取得
     * $part = php_parse($phpcode, [
     *     'begin' => T_CLASS,
     *     'end'   => '{',
     * ]);
     * that(implode('', array_column($part, 'text')))->isSame("class Example\n{");
     * ```
     *
     * @package ryunosuke\Functions\Package\misc
     *
     * @param string $phpcode パースする php コード
     * @param array|int $option パースオプション
     * @return \PhpToken[] トークン配列
     */
    function php_parse($phpcode, $option = [])
    {
        if (is_int($option)) {
            $option = ['flags' => $option];
        }

        $default = [
            'short_open_tag' => null, // ショートオープンタグを扱うか（null だと余計なことはせず ini に従う）
            'line'           => [],   // 行の範囲（以上以下）
            'position'       => [],   // 文字位置の範囲（以上以下）
            'begin'          => [],   // 開始トークン
            'end'            => [],   // 終了トークン
            'offset'         => 0,    // 開始トークン位置
            'flags'          => 0,    // PHPToken の $flags. TOKEN_PARSE を与えると ParseError が出ることがあるのでデフォルト 0
            'cache'          => true, // キャッシュするか否か
            'greedy'         => false,// end と nest か一致したときに処理を継続するか
            'backtick'       => true, // `` もパースするか
            'nest_token'     => [
                ')' => '(',
                '}' => '{',
                ']' => '[',
            ],
        ];
        $option += $default;

        $cachekey = var_hash($phpcode) . $option['flags'] . '-' . $option['backtick'] . '-' . var_export($option['short_open_tag'], true);
        static $cache = [];
        if (!($option['cache'] && isset($cache[$cachekey]))) {
            $position = 0;
            $backtick = '';
            $backticktoken = null;
            $backticking = false;

            $tokens = [];
            $tmp = \PhpToken::tokenize($phpcode, $option['flags']);
            for ($i = 0; $i < count($tmp); $i++) {
                $token = $tmp[$i];

                // @codeCoverageIgnoreStart
                if ($option['short_open_tag'] === true && $token->id === T_INLINE_HTML && ($p = strpos($token->text, '<?')) !== false) {
                    $newtokens = [];
                    $nlcount = 0;

                    if ($p !== 0) {
                        $html = substr($token->text, 0, $p);
                        $nlcount = preg_match_all('#\r\n|\r|\n#u', $html);
                        $newtokens[] = new \PhpToken(T_INLINE_HTML, $html, $token->line);
                    }

                    $code = substr($token->text, $p + 2);
                    $subtokens = \PhpToken::tokenize("<?php $code");
                    $subtokens[0]->text = '<?';
                    foreach ($subtokens as $subtoken) {
                        $subtoken->line += $token->line + $nlcount - 1;
                        $newtokens[] = $subtoken;
                    }

                    array_splice($tmp, $i + 1, 0, $newtokens);
                    continue;
                }
                if ($option['short_open_tag'] === false && $token->id === T_OPEN_TAG && $token->text === '<?') {
                    for ($j = $i + 1; $j < count($tmp); $j++) {
                        if ($tmp[$j]->id === T_CLOSE_TAG) {
                            break;
                        }
                    }
                    $html = implode('', array_map(fn($token) => $token->text, array_slice($tmp, $i, $j - $i + 1)));
                    array_splice($tmp, $i + 1, $j - $i, [new \PhpToken(T_INLINE_HTML, $html, $token->line)]);
                    continue;
                }
                // @codeCoverageIgnoreEnd

                if (!$option['backtick']) {
                    if ($token->text === '`') {
                        if ($backticking) {
                            $token->text = $backtick . $token->text;
                            $token->line = $backticktoken->line;
                            $token->pos = $backticktoken->pos;
                            $backtick = '';
                        }
                        else {
                            $backticktoken = $token;
                        }
                        $backticking = !$backticking;
                    }
                    if ($backticking) {
                        $backtick .= $token->text;
                        continue;
                    }
                }

                $token->pos = $position;
                $position += strlen($token->text);

                /* PhpToken になりコピーオンライトが効かなくなったので時々書き換えをチェックした方が良い
                $token = new class($token->id, $token->text, $token->line, $token->pos) extends \PhpToken {
                    private array $backup = [];
    
                    public function backup()
                    {
                        $this->backup = [
                            'id'   => $this->id,
                            'text' => $this->text,
                            'line' => $this->line,
                            'pos'  => $this->pos,
                        ];
                    }
    
                    public function __clone(): void
                    {
                        $this->backup = [];
                    }
    
                    public function __destruct()
                    {
                        foreach ($this->backup as $name => $value) {
                            assert($this->$name === $value);
                        }
                    }
                };
                $token->backup();
                 */

                $tokens[] = $token;
            }
            // @codeCoverageIgnoreStart
            if ($option['short_open_tag'] === false) {
                for ($i = 0; $i < count($tokens); $i++) {
                    if ($tokens[$i]->id === T_INLINE_HTML && isset($tokens[$i + 1]) && $tokens[$i + 1]->id === T_INLINE_HTML) {
                        $tokens[$i]->text .= $tokens[$i + 1]->text;
                        array_splice($tokens, $i + 1, 1, []);
                        $i--;
                    }
                }
            }
            // @codeCoverageIgnoreEnd
            $cache[$cachekey] = $tokens;
        }
        $tokens = $cache[$cachekey];

        $lines = $option['line'] + [-PHP_INT_MAX, PHP_INT_MAX];
        $positions = $option['position'] + [-PHP_INT_MAX, PHP_INT_MAX];
        $begin_tokens = (array) $option['begin'];
        $end_tokens = (array) $option['end'];
        $nest_tokens = $option['nest_token'];
        $greedy = $option['greedy'];

        $result = [];
        $starting = !$begin_tokens;
        $nesting = 0;
        $offset = is_array($option['offset']) ? ($option['offset'][0] ?? 0) : $option['offset'];
        $endset = is_array($option['offset']) ? ($option['offset'][1] ?? count($tokens)) : count($tokens);

        for ($i = $offset; $i < $endset; $i++) {
            $token = $tokens[$i];

            if ($lines[0] > $token->line) {
                continue;
            }
            if ($lines[1] < $token->line) {
                continue;
            }
            if ($positions[0] > $token->pos) {
                continue;
            }
            if ($positions[1] < $token->pos) {
                continue;
            }

            foreach ($begin_tokens as $t) {
                if ($t === $token->id || $t === $token->text) {
                    $starting = true;
                    break;
                }
            }
            if (!$starting) {
                continue;
            }

            $result[$i] = $token;

            foreach ($nest_tokens as $end_nest => $start_nest) {
                if ($token->id === $start_nest || $token->text === $start_nest) {
                    $nesting++;
                }
                if ($token->id === $end_nest || $token->text === $end_nest) {
                    $nesting--;
                }
            }

            foreach ($end_tokens as $t) {
                if ($t === $token->id || $t === $token->text) {
                    if ($nesting <= 0 || ($nesting === 1 && in_array($t, $nest_tokens, true))) {
                        if ($nesting === 0 && $greedy && isset($nest_tokens[$t])) {
                            break;
                        }
                        break 2;
                    }
                    break;
                }
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\unique_string') || (new \ReflectionFunction('ryunosuke\\chmonos\\unique_string'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\unique_string')) {
    /**
     * 文字列に含まれない文字列を生成する
     *
     * 例えば http のマルチパートバウンダリのような、「競合しない文字列」を生成する。
     * 実装は愚直に文字列を調べて存在しなければそれを返すようになっている。
     * 一応初期値や文字セットは指定可能。
     *
     * $initial に int を与えると初期値としてその文字数分 $charlist から確保する。
     * 例えば生成後の変更が前提で、ある程度の長さを担保したいときに指定すれば最低でもその長さ以上は保証される。
     * $initial に string を与えるとそれがそのまま初期値として使用される。
     * 例えば「ほぼ存在しない文字列」が予測できるのであればそれを指定すれば無駄な処理が省ける。
     *
     * Example:
     * ```php
     * // 単純に呼ぶと生成1,2文字程度の文字列になる
     * that(unique_string('hello, world'))->stringLengthEqualsAny([1, 2]);
     * // 数値を含んでいないので候補文字に数値のみを指定すれば1文字で「存在しない文字列」となる
     * that(unique_string('hello, world', null, range(0, 9)))->stringLengthEquals(1);
     * // int を渡すと最低でもそれ以上は保証される
     * that(unique_string('hello, world', 5))->stringLengthEqualsAny([5, 6]);
     * // string を渡すとそれが初期値となる
     * that(unique_string('hello, world', 'prefix-'))->stringStartsWith('prefix');
     * ```
     *
     * @package ryunosuke\Functions\Package\random
     *
     * @param string $source 元文字列
     * @param string|int $initial 初期文字列あるいは文字数
     * @param string|array $charlist 使用する文字セット
     * @return string 一意な文字列
     */
    function unique_string($source, $initial = null, $charlist = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    {
        assert(is_stringable($initial) || is_int($initial) || is_null($initial));

        if (is_stringable($charlist)) {
            $charlist = preg_split('//', $charlist, -1, PREG_SPLIT_NO_EMPTY);
        }

        $charlength = count($charlist);
        if ($charlength === 0) {
            throw new \InvalidArgumentException('charlist is empty.');
        }

        $result = '';
        if (is_int($initial)) {
            shuffle($charlist);
            $result = implode('', array_slice($charlist, 0, $initial));
        }
        elseif (is_null($initial)) {
            $result .= $charlist[mt_rand(0, $charlength - 1)];
        }
        else {
            $result = $initial;
        }

        while ((($p = strpos($source, $result, $p ?? 0)) !== false)) {
            $result .= $charlist[mt_rand(0, $charlength - 1)];
        }

        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\callable_code') || (new \ReflectionFunction('ryunosuke\\chmonos\\callable_code'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\callable_code')) {
    /**
     * callable のコードブロックを返す
     *
     * 返り値は2値の配列。0番目の要素が定義部、1番目の要素が処理部を表す。
     *
     * Example:
     * ```php
     * list($meta, $body) = callable_code(function (...$args) {return true;});
     * that($meta)->isSame('function (...$args)');
     * that($body)->isSame('{return true;}');
     *
     * // ReflectionFunctionAbstract を渡しても動作する
     * list($meta, $body) = callable_code(new \ReflectionFunction(function (...$args) {return true;}));
     * that($meta)->isSame('function (...$args)');
     * that($body)->isSame('{return true;}');
     * ```
     *
     * @package ryunosuke\Functions\Package\reflection
     *
     * @param callable|\ReflectionFunctionAbstract $callable コードを取得する callable
     * @param bool $return_token true にすると生のトークン配列で返す
     * @return array ['定義部分', '{処理コード}']
     */
    function callable_code($callable, bool $return_token = false)
    {
        $ref = $callable instanceof \ReflectionFunctionAbstract ? $callable : reflect_callable($callable);
        $contents = file($ref->getFileName());
        $start = $ref->getStartLine();
        $end = $ref->getEndLine();
        $codeblock = implode('', array_slice($contents, $start - 1, $end - $start + 1));

        $meta = php_parse("<?php $codeblock", [
            'begin' => [T_FN, T_FUNCTION],
            'end'   => ['{', T_DOUBLE_ARROW],
        ]);
        $end = array_pop($meta);

        if ($end->id === T_DOUBLE_ARROW) {
            $body = php_parse("<?php $codeblock", [
                'begin'  => T_DOUBLE_ARROW,
                'end'    => [';', ',', ')'],
                'offset' => last_key($meta),
                'greedy' => true,
            ]);
            $body = array_slice($body, 1, -1);
        }
        else {
            $body = php_parse("<?php $codeblock", [
                'begin'  => '{',
                'end'    => '}',
                'offset' => last_key($meta),
            ]);
        }

        if ($return_token) {
            return [$meta, $body];
        }

        return [trim(implode('', array_column($meta, 'text'))), trim(implode('', array_column($body, 'text')))];
    }
}

assert(!function_exists('ryunosuke\\chmonos\\parameter_length') || (new \ReflectionFunction('ryunosuke\\chmonos\\parameter_length'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\parameter_length')) {
    /**
     * callable の引数の数を返す
     *
     * Example:
     * ```php
     * // trim の引数は2つ
     * that(parameter_length('trim'))->isSame(2);
     * // trim の必須引数は1つ
     * that(parameter_length('trim', true))->isSame(1);
     * ```
     *
     * @package ryunosuke\Functions\Package\reflection
     *
     * @param callable $callable 対象 callable
     * @param bool $require_only true を渡すと必須パラメータの数を返す
     * @param bool $thought_variadic 可変引数を考慮するか。 true を渡すと可変引数の場合に無限長を返す
     * @return int 引数の数
     */
    function parameter_length($callable, $require_only = false, $thought_variadic = false)
    {
        /** @var \ReflectionFunctionAbstract $ref */
        $ref = reflect_callable($callable);
        if ($thought_variadic && $ref->isVariadic()) {
            return INF;
        }
        elseif ($require_only) {
            return $ref->getNumberOfRequiredParameters();
        }
        else {
            return $ref->getNumberOfParameters();
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\reflect_callable') || (new \ReflectionFunction('ryunosuke\\chmonos\\reflect_callable'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\reflect_callable')) {
    /**
     * callable から ReflectionFunctionAbstract を生成する
     *
     * 実際には ReflectionFunctionAbstract を下記の独自拡張した Reflection クラスを返す（メソッドのオーバーライド等はしていないので完全互換）。
     * - __invoke: 元となったオブジェクトを $this として invoke する（関数・クロージャは invoke と同義）
     * - call: 実行 $this を指定して invoke する（クロージャ・メソッドのみ）
     *   - 上記二つは __call/__callStatic のメソッドも呼び出せる
     * - getDeclaration: 宣言部のコードを返す
     * - getCode: 定義部のコードを返す
     * - isAnonymous: 無名関数なら true を返す（8.2 の isAnonymous 互換）
     * - isStatic: $this バインド可能かを返す（クロージャのみ）
     * - getUsedVariables: use している変数配列を返す（クロージャのみ）
     * - getClosure: 元となったオブジェクトを $object としたクロージャを返す（メソッドのみ）
     *   - 上記二つは __call/__callStatic のメソッドも呼び出せる
     * - getTraitMethod: トレイト側のリフレクションを返す（メソッドのみ）
     *
     * Example:
     * ```php
     * that(reflect_callable('sprintf'))->isInstanceOf(\ReflectionFunction::class);
     * that(reflect_callable('\Closure::bind'))->isInstanceOf(\ReflectionMethod::class);
     *
     * $x = 1;
     * $closure = function ($a, $b) use (&$x) { return $a + $b; };
     * $reflection = reflect_callable($closure);
     * // 単純実行
     * that($reflection(1, 2))->is(3);
     * // 無名クラスを $this として実行
     * that($reflection->call(new class(){}, 1, 2))->is(3);
     * // 宣言部を返す
     * that($reflection->getDeclaration())->is('function ($a, $b) use (&$x)');
     * // 定義部を返す
     * that($reflection->getCode())->is('{ return $a + $b; }');
     * // static か返す
     * that($reflection->isStatic())->is(false);
     * // use 変数を返す
     * that($reflection->getUsedVariables())->is(['x' => 1]);
     * ```
     *
     * @package ryunosuke\Functions\Package\reflection
     *
     * @param callable $callable 対象 callable
     * @return \ReflectCallable|\ReflectionFunction|\ReflectionMethod リフレクションインスタンス
     */
    function reflect_callable($callable)
    {
        // callable チェック兼 $call_name 取得
        if (!is_callable($callable, true, $call_name)) {
            throw new \InvalidArgumentException("'$call_name' is not callable");
        }

        if (is_string($call_name) && strpos($call_name, '::') === false) {
            return new class($callable) extends \ReflectionFunction {
                private $definition;

                public function __invoke(...$args): mixed
                {
                    return $this->invoke(...$args);
                }

                public function getDeclaration(): string
                {
                    return ($this->definition ??= callable_code($this))[0];
                }

                public function getCode(): string
                {
                    return ($this->definition ??= callable_code($this))[1];
                }

                public function isAnonymous(): bool
                {
                    return false;
                }
            };
        }
        elseif ($callable instanceof \Closure) {
            return new class($callable) extends \ReflectionFunction {
                private $callable;
                private $definition;

                public function __construct($function)
                {
                    parent::__construct($function);

                    $this->callable = $function;
                }

                public function __invoke(...$args): mixed
                {
                    return $this->invoke(...$args);
                }

                public function call($newThis = null, ...$args): mixed
                {
                    return ($this->callable)->call($newThis ?? $this->getClosureThis(), ...$args);
                }

                public function getDeclaration(): string
                {
                    return ($this->definition ??= callable_code($this))[0];
                }

                public function getCode(): string
                {
                    return ($this->definition ??= callable_code($this))[1];
                }

                public function isAnonymous(): bool
                {
                    if (method_exists(\ReflectionFunction::class, 'isAnonymous')) {
                        return parent::isAnonymous(); // @codeCoverageIgnore
                    }

                    return strpos($this->name, '{closure}') !== false;
                }

                public function isStatic(): bool
                {
                    return !is_bindable_closure($this->callable);
                }

                public function getUsedVariables(): array
                {
                    if (method_exists(\ReflectionFunction::class, 'getClosureUsedVariables')) {
                        return parent::getClosureUsedVariables(); // @codeCoverageIgnore
                    }

                    $uses = object_properties($this->callable);
                    unset($uses['this']);
                    return $uses;
                }
            };
        }
        else {
            [$class, $method] = explode('::', $call_name, 2);
            // for タイプ 5: 相対指定による静的クラスメソッドのコール (PHP 5.3.0 以降)
            if (strpos($method, 'parent::') === 0) {
                [, $method] = explode('::', $method);
                $class = get_parent_class($class);
            }

            $called_name = '';
            if (!method_exists(is_array($callable) && is_object($callable[0]) ? $callable[0] : $class, $method)) {
                $called_name = $method;
                $method = is_array($callable) && is_object($callable[0]) ? '__call' : '__callStatic';
            }

            return new class($class, $method, $callable, $called_name) extends \ReflectionMethod {
                private $callable;
                private $call_name;
                private $definition;

                public function __construct($class, $method, $callable, $call_name)
                {
                    parent::__construct($class, $method);

                    $this->setAccessible(true); // 8.1 はデフォルトで true になるので模倣する
                    $this->callable = $callable;
                    $this->call_name = $call_name;
                }

                public function __invoke(...$args): mixed
                {
                    if ($this->call_name) {
                        $args = [$this->call_name, $args];
                    }
                    return $this->invoke($this->isStatic() ? null : $this->callable[0], ...$args);
                }

                public function call($newThis = null, ...$args): mixed
                {
                    if ($this->call_name) {
                        $args = [$this->call_name, $args];
                    }
                    return $this->getClosure($newThis ?? ($this->isStatic() ? null : $this->callable[0]))(...$args);
                }

                public function getDeclaration(): string
                {
                    return ($this->definition ??= callable_code($this))[0];
                }

                public function getCode(): string
                {
                    return ($this->definition ??= callable_code($this))[1];
                }

                public function isAnonymous(): bool
                {
                    return false;
                }

                public function getClosure(?object $object = null): \Closure
                {
                    $name = strtolower($this->name);

                    if ($this->isStatic()) {
                        if ($name === '__callstatic') {
                            return \Closure::fromCallable([$this->class, $this->call_name]);
                        }
                        return parent::getClosure();
                    }

                    $object ??= $this->callable[0];
                    if ($name === '__call') {
                        return \Closure::fromCallable([$object, $this->call_name]);
                    }
                    return parent::getClosure($object);
                }

                public function getTraitMethod(): ?\ReflectionMethod
                {
                    $name = strtolower($this->name);
                    $class = $this->getDeclaringClass();
                    $aliases = array_change_key_case($class->getTraitAliases(), CASE_LOWER);

                    if (!isset($aliases[$name])) {
                        if ($this->getFileName() === $class->getFileName()) {
                            return null;
                        }
                        else {
                            return $this;
                        }
                    }

                    [$tname, $mname] = explode('::', $aliases[$name]);
                    $result = new self($tname, $mname, $this->callable, $this->call_name);

                    // alias を張ったとしても自身で再宣言はエラーなく可能で、その場合自身が採用されるようだ
                    if (false
                        || $this->getFileName() !== $result->getFileName()
                        || $this->getStartLine() !== $result->getStartLine()
                        || $this->getEndLine() !== $result->getEndLine()
                    ) {
                        return null;
                    }

                    return $result;
                }
            };
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\reflect_type_resolve') || (new \ReflectionFunction('ryunosuke\\chmonos\\reflect_type_resolve'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\reflect_type_resolve')) {
    /**
     * ReflectionType の型に \\ を付与する
     *
     * php8.0 で ReflectionType の __toString が解放されたけど、それをそのまま埋め込んだりすると \\ がないのでエラーになったりする。
     * この関数を通してから埋め込めば \\ が付くので回避できる、という非常にニッチな関数。
     *
     * 型 exists で判定するため、付与するクラスは存在している必要がある（オプション引数で対応するかもしれない）。
     *
     * Example:
     * ```php
     * // このような DNF 型も形式を保ったまま \\ を付与できる
     * that(reflect_type_resolve('(Countable&Traversable)|object'))->is('(\\Countable&\\Traversable)|object');
     * ```
     *
     * @package ryunosuke\Functions\Package\reflection
     *
     * @param ?string $type string だが実用上は getType 等で得られるインスタンスでよい
     * @return ?string 解決された文字列
     */
    function reflect_type_resolve(?string $type): ?string
    {
        if ($type === null) {
            return null;
        }

        // 拡張関数が string|null ではなく ?string で返すことがあるので ? を含める
        // 8.1以上では交差型もあり得るので (&) も含める
        // そして PREG_SPLIT_DELIM_CAPTURE で分割して再結合すれば元の形式のまま得られる
        $types = preg_split('#([?()|&])#', $type, -1, PREG_SPLIT_DELIM_CAPTURE);
        $types = array_map(fn($v) => type_exists($v) ? "\\" . ltrim($v, '\\') : $v, $types);
        return implode('', $types);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\concat') || (new \ReflectionFunction('ryunosuke\\chmonos\\concat'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\concat')) {
    /**
     * strcat の空文字回避版
     *
     * 基本は strcat と同じ。ただし、**引数の内1つでも空文字を含むなら空文字を返す**。
     * さらに*引数の内1つでも null を含むなら null を返す**。
     *
     * 「プレフィックスやサフィックスを付けたいんだけど、空文字の場合はそのままで居て欲しい」という状況はまれによくあるはず。
     * コードで言えば `strlen($string) ? 'prefix-' . $string : '';` のようなもの。
     * 可変引数なので 端的に言えば mysql の CONCAT みたいな動作になる。
     *
     * ```php
     * that(concat('prefix-', 'middle', '-suffix'))->isSame('prefix-middle-suffix');
     * that(concat('prefix-', '', '-suffix'))->isSame('');
     * that(concat('prefix-', null, '-suffix'))->isSame(null);
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param ?string ...$variadic 結合する文字列（可変引数）
     * @return ?string 結合した文字列
     */
    function concat(...$variadic)
    {
        if (count(array_filter($variadic, 'is_null')) > 0) {
            return null;
        }
        $result = '';
        foreach ($variadic as $s) {
            if (strlen($s) === 0) {
                return '';
            }
            $result .= $s;
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\mb_trim') || (new \ReflectionFunction('ryunosuke\\chmonos\\mb_trim'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\mb_trim')) {
    /**
     * マルチバイト対応 trim
     *
     * @see https://github.com/symfony/polyfill-php84/
     * @deprecated 標準関数と重複
     * @codeCoverageIgnore
     * @package ryunosuke\Functions\Package\strings
     */
    function mb_trim(?string $string)
    {
        trigger_error(__FUNCTION__ . ' is deprecated. use symfony/polyfill or 8.4 builtin', E_USER_DEPRECATED);
        return preg_replace('/\A[\p{C}\p{Z}]++|[\p{C}\p{Z}]++\z/u', '', $string);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\multiexplode') || (new \ReflectionFunction('ryunosuke\\chmonos\\multiexplode'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\multiexplode')) {
    /**
     * explode の配列対応と $limit の挙動を変えたもの
     *
     * $delimiter には配列が使える。いわゆる「複数文字列での分割」の動作になる。
     *
     * $limit に負数を与えると「その絶対値-1までを結合したものと残り」を返す。
     * 端的に言えば「正数を与えると後詰めでその個数で返す」「負数を与えると前詰めでその（絶対値）個数で返す」という動作になる。
     *
     * Example:
     * ```php
     * // 配列を与えると複数文字列での分割
     * that(multiexplode([',', ' ', '|'], 'a,b c|d'))->isSame(['a', 'b', 'c', 'd']);
     * // 負数を与えると前詰め
     * that(multiexplode(',', 'a,b,c,d', -2))->isSame(['a,b,c', 'd']);
     * // もちろん上記2つは共存できる
     * that(multiexplode([',', ' ', '|'], 'a,b c|d', -2))->isSame(['a,b c', 'd']);
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string|array $delimiter 分割文字列。配列可
     * @param string $string 対象文字列
     * @param int $limit 分割数
     * @return array 分割された配列
     */
    function multiexplode($delimiter, ?string $string, $limit = \PHP_INT_MAX)
    {
        $limit = (int) $limit;
        if ($limit < 0) {
            // 下手に php で小細工するよりこうやって富豪的にやるのが一番速かった
            return array_reverse(array_map('strrev', multiexplode($delimiter, strrev($string), -$limit)));
        }
        // explode において 0 は 1 と等しい
        if ($limit === 0) {
            $limit = 1;
        }
        $delimiter = array_map(fn($v) => preg_quote($v, '#'), arrayize($delimiter));
        return preg_split('#' . implode('|', $delimiter) . '#', $string, $limit);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\render_template') || (new \ReflectionFunction('ryunosuke\\chmonos\\render_template'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\render_template')) {
    /**
     * "hoge ${hoge}" 形式のレンダリング
     *
     * ES6 のテンプレートリテラルのようなもの。
     *
     * - 埋め込みは ${var} のみで、{$var} は無効
     * - ${expression} は「評価結果の変数名」ではなく「評価結果」が埋め込まれる
     *
     * この関数は実験的機能のため、互換性を維持せず変更される可能性がある。
     * また、 token_get_all に頼っているため php9 で `${var}` 構文が廃止されたらおそらく動かない。
     *
     * Example:
     * ```php
     * that(render_template('${max($nums)}', ['nums' => [1, 9, 3]]))->isSame('9');
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string $template レンダリングする文字列
     * @param array|object $vars レンダリング変数
     * @param callable $tag ブロックと変数値が渡ってくるクロージャ（タグ付きテンプレートリテラルのようなもの）
     * @return string レンダリングされた文字列
     */
    function render_template(?string $template, $vars, $tag = null)
    {
        assert(is_arrayable($vars) || is_array($vars));

        $tag ??= function ($literals, ...$values) {
            $l = max(count($literals), count($values));
            $result = '';
            for ($i = 0; $i < $l; $i++) {
                $result .= ($literals[$i] ?? '') . ($values[$i] ?? '');
            }
            return $result;
        };

        [$blocks, $stmts] = cacheobject(__FUNCTION__)->hash($template, function () use ($template) {
            $tokens = array_slice(php_parse("<?php <<<PHPTEMPLATELITERAL\n" . $template . "\nPHPTEMPLATELITERAL;", [
                'backtick' => false,
            ]), 2, -2);
            $last = array_key_last($tokens);
            if ($tokens[$last]->id === T_ENCAPSED_AND_WHITESPACE) {
                $tokens[$last] = clone $tokens[$last];
                $tokens[$last]->text = substr($tokens[$last]->text, 0, -1);
            }

            $blocks = [""];
            $stmts = [];
            for ($i = 0, $l = count($tokens); $i < $l; $i++) {
                if ($tokens[$i]->id === T_DOLLAR_OPEN_CURLY_BRACES) {
                    for ($j = $i + 1; $j < $l; $j++) {
                        if ($tokens[$j]->text === '}') {
                            $blocks[] = "";
                            $stmts[] = array_slice($tokens, $i + 1, $j - $i - 1, true);
                            $i = $j;
                            break;
                        }
                    }
                }
                else {
                    $blocks[count($blocks) - 1] .= strtr_escaped($tokens[$i]->text, ['\$' => '$']);
                }
            }

            array_walk_recursive($stmts, fn(&$token) => $token = (array) $token);
            return [$blocks, $stmts];
        });

        $values = [];
        foreach ($stmts as $stmt) {
            foreach ($stmt as $n => $subtoken) {
                if ($subtoken['id'] === ord('`')) {
                    $stmt[$n]['text'] = var_export(render_template(substr($subtoken['text'], 1, -1), $vars), true);
                }
                elseif (attr_exists($subtoken['text'], $vars) && ($stmt[$n + 1]['text'] ?? '') !== '(') {
                    $stmt[$n]['text'] = '$' . $subtoken['text'];
                }
            }
            $values[] = phpval(implode('', array_column($stmt, 'text')), (array) $vars);
        }

        return $tag($blocks, ...$values);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\str_exists') || (new \ReflectionFunction('ryunosuke\\chmonos\\str_exists'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\str_exists')) {
    /**
     * 指定文字列を含むか返す
     *
     * Example:
     * ```php
     * that(str_exists('abc', 'b'))->isTrue();
     * that(str_exists('abc', 'B', true))->isTrue();
     * that(str_exists('abc', ['b', 'x'], false, false))->isTrue();
     * that(str_exists('abc', ['b', 'x'], false, true))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string $haystack 対象文字列
     * @param string|array $needle 調べる文字列
     * @param bool $case_insensitivity 大文字小文字を無視するか
     * @param bool $and_flag すべて含む場合に true を返すか
     * @return bool $needle を含むなら true
     */
    function str_exists(?string $haystack, $needle, $case_insensitivity = false, $and_flag = false)
    {
        if (!is_array($needle)) {
            $needle = [$needle];
        }

        $needle = array_map('strval', $needle);

        foreach ($needle as $str) {
            if ($str === '') {
                continue;
            }
            $pos = $case_insensitivity ? stripos($haystack, $str) : strpos($haystack, $str);
            if ($and_flag && $pos === false) {
                return false;
            }
            if (!$and_flag && $pos !== false) {
                return true;
            }
        }
        return !!$and_flag;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\str_quote') || (new \ReflectionFunction('ryunosuke\\chmonos\\str_quote'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\str_quote')) {
    /**
     * 文字列をダブルクォート文字列に変換する
     *
     * 文字ではうまく表現できないが、例えば「本当の改行」が \n になり、「本当のタブ文字」が \t になる。
     * コントロール文字は "\code" 形式のようになる。
     * 「得られた文字列は eval すると元に戻る」とでも言えばいいか。
     *
     * 制御文字をそのまま出力するとまずい状況が稀によくある（特に行指向媒体への改行文字）。
     * この関数を通せば php の文字列の体裁を保ったまま1行化できる。
     * 端的に言えば var_export の文字列特化版。
     *
     * 挙動は $options である程度制御可能。
     * 各 $options は原則的に文字のマップか true を渡す（true の場合はデフォルトが使用される）。
     * 一部、それ以外の値・型に対応しているものもある。
     *
     * - escape-character: 制御文字のうち、明確なエスケープシーケンスが存在する場合はそれを使用する
     *   - control-character にオーバーラップするがこちらが優先される
     * - control-character: 00 ～ 1F+7F の制御文字を \code 形式にする
     *   - 文字列で "oct", "hex", "HEX" も指定できる。その場合それぞれ \oct, \xhex, \xHEX 形式になる
     * - special-character: ダブルクオート内の文字列が文字列であるための変換を行う
     *   - 原則的にデフォルトに任せて指定すべきではない
     *
     * Example:
     * ```php
     * // （非常に分かりにくいが）下記のように変換される
     * that(str_quote("\$a\nb\rc\x00"))->isSame("\"\\\$a\\nb\\rc\\0\"");
     * // 文字としての意味は一緒であり要するに表現形式の違いなので、php の世界で eval すれば元の文字列に戻る
     * that(eval('return ' . str_quote("\$a\nb\rc\x00") . ';'))->isSame("\$a\nb\rc\x00");
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string $string 対象文字列
     * @param array $options オプション配列
     * @return string クォート文字列
     */
    function str_quote(string $string, array $options = []): string
    {
        $options += [
            'escape-character'  => true,
            'control-character' => true,
            'special-character' => true,
            'heredoc'           => '',
            'nowdoc'            => '',
            'indent'            => 0,
        ];

        assert(!($options['heredoc'] && $options['nowdoc']));

        // nowdoc にエスケープは存在しないのでそのまま埋め込む（その結果壊れてもこの関数の責務ではない）
        if (strlen($options['nowdoc'])) {
            $indent = str_repeat(" ", $options['indent']);
            $string = preg_replace('#(\R)#u', '$1' . $indent, $string);
            return "<<<'{$options['nowdoc']}'\n{$indent}{$string}\n{$indent}{$options['nowdoc']}";
        }

        // @see https://www.php.net/manual/ja/language.types.string.php#language.types.string.syntax.double
        $special_chars = [
            '\\' => '\\\\', // バックスラッシュ
            '"'  => '\\"',  // 二重引用符
            '$'  => '\\$',  // ドル記号
        ];
        $escape_chars = [
            "\11" => '\\t', // 水平タブ (HT またはアスキーの 0x09 (9))
            "\12" => '\\n', // ラインフィード (LF またはアスキーの 0x0A (10))
            "\13" => '\\v', // 垂直タブ (VT またはアスキーの 0x0B (11))
            "\14" => '\\f', // フォームフィード (FF またはアスキーの 0x0C (12))
            "\15" => '\\r', // キャリッジリターン (CR またはアスキーの 0x0D (13))
            "\33" => '\\e', // エスケープ (ESC あるいはアスキーの 0x1B (27))
        ];
        $control_chars = [
            "\0"   => "\\0",
            "\1"   => "\\1",
            "\2"   => "\\2",
            "\3"   => "\\3",
            "\4"   => "\\4",
            "\5"   => "\\5",
            "\6"   => "\\6",
            "\7"   => "\\7",
            "\10"  => "\\10",
            "\11"  => "\\11",
            "\12"  => "\\12",
            "\13"  => "\\13",
            "\14"  => "\\14",
            "\15"  => "\\15",
            "\16"  => "\\16",
            "\17"  => "\\17",
            "\20"  => "\\20",
            "\21"  => "\\21",
            "\22"  => "\\22",
            "\23"  => "\\23",
            "\24"  => "\\24",
            "\25"  => "\\25",
            "\26"  => "\\26",
            "\27"  => "\\27",
            "\30"  => "\\30",
            "\31"  => "\\31",
            "\32"  => "\\32",
            "\33"  => "\\33",
            "\34"  => "\\34",
            "\35"  => "\\35",
            "\36"  => "\\36",
            "\37"  => "\\37",
            "\177" => "\\177",
        ];

        // heredoc 用の特殊処理（タイプ可能な文字はエスケープしなくてもよいだろう）
        if (strlen($options['heredoc'])) {
            $control_chars = array_diff_key($control_chars, $escape_chars);
            $escape_chars = [];
            unset($special_chars['"']);
        }

        $charmap = [];
        if ($options['special-character']) {
            $charmap += is_array($options['special-character']) ? $options['special-character'] : $special_chars;
        }
        if ($options['escape-character']) {
            $charmap += is_array($options['escape-character']) ? $options['escape-character'] : $escape_chars;
        }
        if ($options['control-character']) {
            if ($options['control-character'] === 'oct') {
                // デフォで oct にしてあるので変換不要
                assert(end($control_chars) === "\\177");
            }
            if ($options['control-character'] === 'hex') {
                $control_chars = array_map(fn($v) => sprintf('\\x%02x', octdec(trim($v, '\\'))), $control_chars);
            }
            if ($options['control-character'] === 'HEX') {
                $control_chars = array_map(fn($v) => sprintf('\\x%02X', octdec(trim($v, '\\'))), $control_chars);
            }
            $charmap += is_array($options['control-character']) ? $options['control-character'] : $control_chars;
        }

        $string = strtr($string, $charmap);

        if (strlen($options['heredoc'])) {
            $indent = str_repeat(" ", $options['indent']);
            $string = preg_replace('#(\R)#u', '$1' . $indent, $string);
            return "<<<{$options['heredoc']}\n{$indent}{$string}\n{$indent}{$options['heredoc']}";
        }

        return '"' . $string . '"';
    }
}

assert(!function_exists('ryunosuke\\chmonos\\strpos_array') || (new \ReflectionFunction('ryunosuke\\chmonos\\strpos_array'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\strpos_array')) {
    /**
     * 複数の文字列で strpos する
     *
     * $needles のそれぞれの位置を配列で返す。
     * ただし、見つからなかった文字は結果に含まれない。
     *
     * Example:
     * ```php
     * // 見つかった位置を返す
     * that(strpos_array('hello world', ['hello', 'world']))->isSame([
     *     0 => 0,
     *     1 => 6,
     * ]);
     * // 見つからない文字は含まれない
     * that(strpos_array('hello world', ['notfound', 'world']))->isSame([
     *     1 => 6,
     * ]);
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string $haystack 対象文字列
     * @param iterable $needles 位置を取得したい文字列配列
     * @param int $offset 開始位置
     * @return array $needles それぞれの位置配列
     */
    function strpos_array(?string $haystack, $needles, $offset = 0)
    {
        if ($offset < 0) {
            $offset += strlen($haystack);
        }

        $result = [];
        foreach (arrayval($needles, false) as $key => $needle) {
            $pos = strpos($haystack, $needle, $offset);
            if ($pos !== false) {
                $result[$key] = $pos;
            }
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\strpos_escaped') || (new \ReflectionFunction('ryunosuke\\chmonos\\strpos_escaped'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\strpos_escaped')) {
    /**
     * エスケープを考慮して strpos する
     *
     * 文字列中のエスケープ中でない生の文字を検索する。
     * 例えば `"abc\nxyz"` という文字列で `"n"` という文字は存在しないとみなす。
     * `"\n"` は改行のエスケープシーケンスであり、 `"n"` という文字ではない（エスケープシーケンスとして "n" を流用しているだけ）。
     * 逆に `"\\n"` はバックスラッシュと `"n"` という文字であり `"n"` が存在する。
     * 簡単に言えば「直前にバックスラッシュがある場合はヒットしない strpos」である。
     * バックスラッシュは $escape 引数で指定可能。
     *
     * $needle 自体にエスケープ文字を含む場合、反対の意味で検索する。
     * つまり、「直前にバックスラッシュがある場合のみヒットする strpos」になる。
     *
     * $offset 引数を指定するとその位置から探索を開始するが、戻り読みはしないのでエスケープ文字の真っ只中を指定する場合は注意。
     * 例えば `"\n"` は改行文字だけであるが、offset に 1 に指定して "n" を探すとマッチする。
     *
     * Example:
     * ```php
     * # 分かりにくいので \ ではなく % をエスケープ文字とする
     * $defargs = [0, '%'];
     *
     * // これは null である（"%d" という文字の列であるため "d" という文字は存在しない）
     * that(strpos_escaped('%d', 'd', ...$defargs))->isSame(null);
     * // これは 2 である（"%" "d" という文字の列であるため（d の前の % は更にその前の % に呑まれておりメタ文字ではない））
     * that(strpos_escaped('%%d', 'd', ...$defargs))->isSame(2);
     *
     * // これは 0 である（% をつけて検索するとそのエスケープシーケンス的なものそのものを探すため）
     * that(strpos_escaped('%d', '%d', ...$defargs))->isSame(0);
     * // これは null である（"%" "d" という文字の列であるため "%d" という文字は存在しない）
     * that(strpos_escaped('%%d', '%d', ...$defargs))->isSame(null);
     * // これは 2 である（"%" "%d" という文字の列であるため）
     * that(strpos_escaped('%%%d', '%d', ...$defargs))->isSame(2);
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string $haystack 対象文字列
     * @param string|array $needle 探す文字
     * @param int $offset 開始位置
     * @param string $escape エスケープ文字
     * @param ?string $found 見つかった文字が格納される
     * @return ?int 見つかった位置
     */
    function strpos_escaped(?string $haystack, $needle, $offset = 0, $escape = '\\', &$found = null)
    {
        $q_escape = preg_quote($escape, '#');
        if (is_stringable($needle)) {
            $needle = preg_split("#($q_escape?.)#u", $needle, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
        }

        $needles = arrayval($needle);
        assert(!in_array($escape, $needles, true), sprintf('$needle must not contain only escape charactor ("%s")', implode(', ', $needles)));

        $matched = [];
        foreach (array_map(fn($c) => preg_quote($c, '#'), $needles) as $need) {
            if (preg_match_all("#((?:$q_escape)*?)($need)#u", $haystack, $matches, PREG_OFFSET_CAPTURE | PREG_SET_ORDER, $offset)) {
                foreach ($matches as [, $m_escape, $m_needle]) {
                    if ((strlen($m_escape[0]) / strlen($escape)) % 2 === 0) {
                        $matched[$m_needle[1]] ??= $m_needle[0];
                    }
                }
            }
        }
        if (!$matched) {
            $found = null;
            return null;
        }

        ksort($matched);
        $min = array_key_first($matched);
        $found = $matched[$min];
        return $min;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\strtr_escaped') || (new \ReflectionFunction('ryunosuke\\chmonos\\strtr_escaped'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\strtr_escaped')) {
    /**
     * エスケープを考慮して strtr する
     *
     * 「エスケープ」についての詳細は strpos_escaped を参照。
     *
     * $replace_pairs は [from => to] な配列を指定する。
     * to がクロージャの場合はキーとオフセットでコールバックされる。
     *
     * strtr と同様、最も長いキーから置換を行い、置換後の文字列は対象にならない。
     *
     * Example:
     * ```php
     * # 分かりにくいので \ ではなく % をエスケープ文字とする
     * that(strtr_escaped('XYZ ab %% %s', [
     *     'ab'  => 'AB',  // 2. 1 で置換された文字は対象にならない
     *     'A'   => '%a',  // 使われない
     *     'Z'   => '%z',  // 使われない
     *     '%%'  => 'p',   // 普通に置換される
     *     's'   => 'S',   // エスケープが対象なので置換されない（%s は文字 "s" ではない（\n が文字 "n" ではないのと同じ））
     *     'XYZ' => 'abc', // 1. 後ろにあるがまず置換される
     * ], '%'))->isSame('abc AB p %s');
     * ```
     *
     * @package ryunosuke\Functions\Package\strings
     *
     * @param string $string 対象文字列
     * @param array $replace_pairs 置換するペア
     * @param string $escape エスケープ文字
     * @return string 置換された文字列
     */
    function strtr_escaped(?string $string, $replace_pairs, $escape = '\\')
    {
        uksort($replace_pairs, fn($a, $b) => strlen($b) - strlen($a));
        $froms = array_keys($replace_pairs);

        $offset = 0;
        while (($pos = strpos_escaped($string, $froms, $offset, $escape, $found)) !== null) {
            $to = $replace_pairs[$found];
            $replaced = $to instanceof \Closure ? $to($found, $pos) : $to;
            $string = substr_replace($string, $replaced, $pos, strlen($found));
            $offset = $pos + strlen($replaced);
        }
        return $string;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\blank_if') || (new \ReflectionFunction('ryunosuke\\chmonos\\blank_if'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\blank_if')) {
    /**
     * 値が空なら null を返す
     *
     * `is_empty($value) ? $value : null` とほぼ同じ。
     * 言ってしまえば「falsy な値を null に変換する」とも言える。
     *
     * ここでいう falsy とは php 標準の `empty` ではなく本ライブラリの `is_empty` であることに留意（"0" は空ではない）。
     * さらに利便性のため 0, 0.0 も空ではない判定をする（strpos や array_search などで「0 は意味のある値」という事が多いので）。
     * 乱暴に言えば「仮に文字列化したとき、情報量がゼロ」が falsy になる。
     *
     * - 「 `$var ?: 'default'` で十分なんだけど "0" が…」
     * - 「 `$var ?? 'default'` で十分なんだけど false が…」
     *
     * という状況はまれによくあるはず。
     *
     * ?? との親和性のため null を返す動作がデフォルトだが、そのデフォルト値は引数で渡すこともできる。
     * 用途は Example を参照。
     *
     * Example:
     * ```php
     * // falsy な値は null を返すので null 合体演算子でデフォルト値が得られる
     * that(blank_if(null) ?? 'default')->isSame('default');
     * that(blank_if('')   ?? 'default')->isSame('default');
     * // falsy じゃない値の場合は引数をそのまま返すので null 合体演算子には反応しない
     * that(blank_if(0)   ?? 'default')->isSame(0);   // 0 は空ではない
     * that(blank_if('0') ?? 'default')->isSame('0'); // "0" は空ではない
     * that(blank_if(1)   ?? 'default')->isSame(1);
     * that(blank_if('X') ?? 'default')->isSame('X');
     * // 第2引数で返る値を指定できるので下記も等価となる。ただし、php の仕様上第2引数が必ず評価されるため、関数呼び出しなどだと無駄な処理となる
     * that(blank_if(null, 'default'))->isSame('default');
     * that(blank_if('',   'default'))->isSame('default');
     * that(blank_if(0,    'default'))->isSame(0);
     * that(blank_if('0',  'default'))->isSame('0');
     * that(blank_if(1,    'default'))->isSame(1);
     * that(blank_if('X',  'default'))->isSame('X');
     * // 第2引数の用途は少し短く書けることと演算子の優先順位のつらみの回避程度（`??` は結構優先順位が低い。下記を参照）
     * that(0 < blank_if(null) ?? 1)->isFalse();  // (0 < null) ?? 1 となるので false
     * that(0 < blank_if(null, 1))->isTrue();     // 0 < 1 となるので true
     * that(0 < (blank_if(null) ?? 1))->isTrue(); // ?? で同じことしたいならこのように括弧が必要
     *
     * # ここから下は既存言語機構との比較（愚痴っぽいので読まなくてもよい）
     *
     * // エルビス演算子は "0" にも反応するので正直言って使いづらい（php における falsy の定義は広すぎる）
     * that(null ?: 'default')->isSame('default');
     * that(''   ?: 'default')->isSame('default');
     * that(1    ?: 'default')->isSame(1);
     * that('0'  ?: 'default')->isSame('default'); // こいつが反応してしまう
     * that('X'  ?: 'default')->isSame('X');
     * // 逆に null 合体演算子は null にしか反応しないので微妙に使い勝手が悪い（php の標準関数が false を返したりするし）
     * that(null ?? 'default')->isSame('default'); // こいつしか反応しない
     * that(''   ?? 'default')->isSame('');
     * that(1    ?? 'default')->isSame(1);
     * that('0'  ?? 'default')->isSame('0');
     * that('X'  ?? 'default')->isSame('X');
     * // 恣意的な例だが、 array_search は false も 0 も返し得るので ?: は使えない。 null を返すこともないので ?? も使えない（エラーも吐かない）
     * that(array_search('a', ['a', 'b', 'c']) ?: 'default')->isSame('default'); // 見つかったのに 0 に反応するので 'default' になってしまう
     * that(array_search('x', ['a', 'b', 'c']) ?? 'default')->isSame(false);     // 見つからないので 'default' としたいが false になってしまう
     * // 要するに単に「見つからなかった場合に 'default' としたい」だけなんだが、下記のようにめんどくさいことをせざるを得ない
     * that(array_search('x', ['a', 'b', 'c']) === false ? 'default' : array_search('x', ['a', 'b', 'c']))->isSame('default'); // 3項演算子で2回呼ぶ
     * that(($tmp = array_search('x', ['a', 'b', 'c']) === false) ? 'default' : $tmp)->isSame('default');                      // 一時変数を使用する（あるいは if 文）
     * // このように書きたかった
     * that(blank_if(array_search('x', ['a', 'b', 'c'])) ?? 'default')->isSame('default'); // null 合体演算子版
     * that(blank_if(array_search('x', ['a', 'b', 'c']), 'default'))->isSame('default');   // 第2引数版
     * ```
     *
     * @package ryunosuke\Functions\Package\syntax
     *
     * @param mixed $var 判定する値
     * @param mixed $default 空だった場合のデフォルト値
     * @return mixed 空なら $default, 空じゃないなら $var をそのまま返す
     */
    function blank_if($var, $default = null)
    {
        if (is_object($var)) {
            // 文字列化できるかが優先
            if (is_stringable($var)) {
                return strlen($var) ? $var : $default;
            }
            // 次点で countable
            if (is_countable($var)) {
                return count($var) ? $var : $default;
            }
            return $var;
        }

        // 0, 0.0, "0" は false
        if ($var === 0 || $var === 0.0 || $var === '0') {
            return $var;
        }

        // 上記以外は empty に任せる
        return empty($var) ? $default : $var;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\base64url_encode') || (new \ReflectionFunction('ryunosuke\\chmonos\\base64url_encode'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\base64url_encode')) {
    /**
     * url safe な base64_encode
     *
     * れっきとした RFC があるのかは分からないが '+' => '-', '/' => '_' がデファクトだと思うのでそのようにしてある。
     * パディングの = も外す。
     *
     * @package ryunosuke\Functions\Package\url
     *
     * @param string $string 変換元文字列
     * @return string base64url 文字列
     */
    function base64url_encode($string)
    {
        return rtrim(strtr(base64_encode($string), ['+' => '-', '/' => '_']), '=');
    }
}

assert(!function_exists('ryunosuke\\chmonos\\dataurl_encode') || (new \ReflectionFunction('ryunosuke\\chmonos\\dataurl_encode'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\dataurl_encode')) {
    /**
     * DataURL をエンコードする
     *
     * $metadata で mimetype や エンコード等を指定できる。
     * 指定されていない場合、自動検出して埋め込まれる。
     *
     * - mimetype(?string): 特筆無し
     * - charset(?string): 自動検出は mime 名になる。明示指定はそのまま埋め込まれる
     * - base64(?bool): true:base64encode, false:urlencode, null: raw
     *   - null の raw はスキームとしては base64 となる。つまり既に base64 の文字列が手元にある場合（変換したくない場合）に指定する
     *
     * Example:
     * ```php
     * that(dataurl_encode("hello, world", ['base64' => false]))->isSame("data:text/plain;charset=US-ASCII,hello%2C%20world");
     * that(dataurl_encode("hello, world", ['mimetype' => 'text/csv', 'charset' => 'hoge']))->isSame("data:text/csv;charset=hoge;base64,aGVsbG8sIHdvcmxk");
     * ```
     *
     * @package ryunosuke\Functions\Package\url
     *
     * @param string $data エンコードするデータ
     * @param array $metadata エンコードオプション
     * @return string DataURL
     */
    function dataurl_encode($data, $metadata = [])
    {
        if (!isset($metadata['mimetype'], $metadata['charset'])) {
            try {
                $finfo = finfo_open();
                [$mimetype, $charset] = preg_split('#;\\s#', finfo_buffer($finfo, $data, FILEINFO_MIME), 2, PREG_SPLIT_NO_EMPTY);

                $metadata['mimetype'] ??= $mimetype;
                $metadata['charset'] ??= mb_preferred_mime_name(explode('=', $charset, 2)[1]);
            }
            finally {
                finfo_close($finfo);
            }
        }

        if (!array_key_exists('base64', $metadata)) {
            $metadata['base64'] = true;
        }

        $encoder = function ($data) use ($metadata) {
            if ($metadata['base64'] === null) {
                return $data;
            }

            if ($metadata['base64']) {
                return base64_encode($data);
            }
            else {
                return rawurlencode($data);
            }
        };

        return "data:"
            . $metadata['mimetype']
            . (strlen($metadata['charset']) ? ";charset=" . $metadata['charset'] : "")
            . (($metadata['base64'] ?? true) ? ';base64' : '')
            . "," . $encoder($data);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\cacheobject') || (new \ReflectionFunction('ryunosuke\\chmonos\\cacheobject'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\cacheobject')) {
    /**
     * psr-16 を実装したキャッシュオブジェクトを返す
     *
     * このオブジェクトはあくまで「他のパッケージに依存したくない」場合のデフォルト実装としての使用を想定している。
     *
     * - キャッシュはファイルシステムに保存される
     * - キャッシュキーの . はディレクトリ区切りとして使用される
     * - TTL を指定しなかったときのデフォルト値は約100年（実質無期限だろう）
     * - psr-16 にはない getOrSet(fetch) が生えている（利便性が非常に高く使用頻度が多いため）
     *
     * 性質上、参照されない期限切れキャッシュが溜まり続けるが $clean_probability を渡すと一定確率で削除される。
     * さらに $clean_execution_time を指定すると削除の実行時間が制限される。
     * $clean_probability は 1 が 100%（必ず削除）、 0 が 0%（削除しない）である。
     * 削除処理は軽くはないため高頻度な実行は避けなければならない。
     * clean メソッドが生えているので明示的に呼ぶことも可能。
     *
     * psr/simple-cache （\Psr\SimpleCache\CacheInterface）が存在するなら implement される。
     * 存在しないなら素の無名クラスで返す。
     * 動作に違いはないが instanceoof や class_implements に違いが出てくるので注意。
     *
     * @package ryunosuke\Functions\Package\utility
     *
     * @param ?string $directory キャッシュ保存ディレクトリ
     * @param float $clean_probability 不要キャッシュの削除確率
     * @param ?float $clean_execution_time 不要キャッシュの最大実行時間
     * @return \Cacheobject psr-16 実装オブジェクト
     */
    function cacheobject($directory = null, $clean_probability = 0, $clean_execution_time = null)
    {
        static $cacheobjects = [];

        $cachedir = function_configure('cachedir');

        // 相対パスは cachedir からの相対とする
        if ($directory !== null && !path_is_absolute($directory)) {
            $directory = $cachedir . DIRECTORY_SEPARATOR . strtr($directory, ['\\' => '%']);
        }
        $directory ??= $cachedir;

        $cacheobject = $cacheobjects[$directory] ??= (function ($directory) {
            $cacheobject = new class($directory) {
                private $directory;
                private $entries = [];

                public function __construct(string $directory)
                {
                    assert(strlen($directory));
                    $this->directory = $directory;
                }

                public function __debugInfo()
                {
                    $class = self::class;
                    $props = (array) $this;

                    // 全キャッシュは情報量としてでかすぎるが、何がどこに配置されているかくらいは有ってもいい
                    $ekey = "\0$class\0entries";
                    assert(array_key_exists($ekey, $props));
                    $props[$ekey] = array_reduce(array_keys($props[$ekey]), fn($acc, $k) => $acc + [$k => $this->_getFilename($k)], []);

                    return $props;
                }

                private function _exception(string $message = "", int $code = 0, \Throwable $previous = null): \Throwable
                {
                    return interface_exists(\Psr\SimpleCache\InvalidArgumentException::class)
                        ? new class ( $message, $code, $previous ) extends \InvalidArgumentException implements \Psr\SimpleCache\InvalidArgumentException { }
                        : new class ( $message, $code, $previous ) extends \InvalidArgumentException { };
                }

                private function _validateKey(string $key): void
                {
                    if ($key === '') {
                        throw $this->_exception("\$key is empty string");
                    }
                    if (strpbrk($key, '{}()/\\@:') !== false) {
                        throw $this->_exception("\$key contains reserved character({}()/\\@:)");
                    }
                }

                private function _normalizeTtl($ttl): int
                {
                    if ($ttl === null) {
                        return 60 * 60 * 24 * 365 * 100;
                    }
                    if (is_int($ttl)) {
                        return $ttl;
                    }
                    if ($ttl instanceof \DateInterval) {
                        return (new \DateTime())->setTimestamp(0)->add($ttl)->getTimestamp();
                    }
                    throw $this->_exception("\$ttl must be null|int|DateInterval(" . gettype($ttl) . ")");
                }

                private function _getFilename(string $key): string
                {
                    return $this->directory . DIRECTORY_SEPARATOR . strtr(rawurlencode($key), ['.' => DIRECTORY_SEPARATOR]) . ".php-cache";
                }

                private function _getCacheFilenames(): array
                {
                    return file_list($this->directory, [
                        '!type'     => ['dir', 'link'],
                        'extension' => ['php-cache'],
                    ]) ?? [];
                }

                private function _getMetadata(string $filename): ?array
                {
                    $fp = @fopen($filename, "r");
                    if ($fp === false) {
                        return null;
                    }
                    try {
                        $first = fgets($fp);
                        $meta = @json_decode(substr($first, strpos($first, '#') + 1), true);
                        return $meta ?: null;
                    }
                    finally {
                        fclose($fp);
                    }
                }

                public function keys(?string $pattern = null)
                {
                    $files = $this->_getCacheFilenames();

                    $now = time();
                    $result = [];
                    foreach ($files as $file) {
                        $meta = $this->_getMetadata($file);
                        if ($meta && ($pattern === null || fnmatch($pattern, $meta['key']))) {
                            $result[$meta['key']] = [
                                'realpath' => $file,
                                'size'     => filesize($file),
                                'ttl'      => $meta['expire'] - $now,
                            ];
                        }
                    }
                    return $result;
                }

                public function clean($max_execution_time = null)
                {
                    $files = file_list($this->directory, [
                        '!type' => 'link',
                    ]);

                    set_error_handler(fn() => true);
                    try {
                        $end = microtime(true) + ($max_execution_time ?? 0);
                        foreach ($files as $file) {
                            if ($max_execution_time !== null && microtime(true) >= $end) {
                                break; // @codeCoverageIgnore
                            }
                            if (is_file($file)) {
                                $meta = $this->_getMetadata($file);
                                if (isset($meta['expire']) && $meta['expire'] < time()) {
                                    unset($this->entries[$meta['key']]);
                                    unlink($file);
                                }
                            }
                            elseif (is_dir($file)) {
                                rmdir($file);
                            }
                        }
                    }
                    finally {
                        restore_error_handler();
                    }
                }

                public function fetch($key, $provider, $ttl = null)
                {
                    $value = $this->get($key);
                    if ($value === null) {
                        $value = $provider($this);
                        $this->set($key, $value, $ttl);
                    }
                    return $value;
                }

                public function fetchMultiple($providers, $ttl = null)
                {
                    $result = $this->getMultiple(array_keys($providers));
                    foreach ($providers as $key => $provider) {
                        $result[$key] ??= $this->fetch($key, $provider, $ttl);
                    }
                    return $result;
                }

                public function get($key, $default = null)
                {
                    $this->_validateKey($key);

                    if (!isset($this->entries[$key])) {
                        error_clear_last();
                        $this->entries[$key] = @include $this->_getFilename($key);
                        if (error_get_last() !== null) {
                            $this->entries[$key] = [0, null];
                        }
                    }
                    $entry = $this->entries[$key];
                    if ($entry[0] < time()) {
                        $this->delete($key);
                        return $default;
                    }

                    $this->entries[$key] = $entry;
                    return $entry[1];
                }

                public function set($key, $value, $ttl = null)
                {
                    $this->_validateKey($key);
                    $ttl = $this->_normalizeTtl($ttl);

                    if ($ttl <= 0) {
                        return $this->delete($key);
                    }

                    $expire = time() + $ttl;
                    $this->entries[$key] = [$expire, $value];
                    $meta = json_encode(['key' => $key, 'expire' => $expire]);
                    // var_export3 はあらゆる出力を可能にしているので **読み込み時** のオーバーヘッドがでかく、もし var_export が使えるならその方が格段に速い
                    // しかし要素を再帰的に全舐め（is_exportable）しないと「var_export できるか？」は分からないというジレンマがある
                    // このコンテキストは「キャッシュ」なので書き込み時のオーバーヘッドよりも読み込み時のオーバーヘッドを優先して判定を行っている
                    // ただし、 var_export3 は非常に依存がでかいので明示指定時のみ
                    $var_export3 = function_resolve('var_export3');
                    if ($var_export3 === null || is_exportable($this->entries[$key])) {
                        $code = var_export($this->entries[$key], true);
                    }
                    else {
                        $code = $var_export3($this->entries[$key], true);
                    }
                    return !!file_set_contents($this->_getFilename($key), "<?php # $meta\nreturn $code;\n");
                }

                public function delete($key)
                {
                    $this->_validateKey($key);

                    unset($this->entries[$key]);
                    return @unlink($this->_getFilename($key));
                }

                public function provide($provider, ...$args)
                {
                    $provider_hash = (string) new \ReflectionFunction($provider);
                    $cacheid = "autoprovide." . hash('fnv164', $provider_hash);
                    $key = $provider_hash . '@' . serialize($args);

                    $cache = $this->get($cacheid) ?? [];
                    if (!array_key_exists($key, $cache)) {
                        $result = $provider(...$args);
                        if ($result === null) {
                            return null;
                        }
                        $cache[$key] = $result;
                        $this->set($cacheid, $cache);
                    }
                    return $cache[$key];
                }

                public function hash($key, $provider, $ttl = null)
                {
                    $now = time();
                    $key = is_stringable($key) ? "$key" : json_encode($key);
                    $cacheid = "hash." . hash('fnv164', $key);
                    $ttl = $ttl === null ? null : $this->_normalizeTtl($ttl);

                    $cache = $this->get($cacheid) ?? [];

                    // ttl チェック
                    if (isset($cache[$key][2]) && ($cache[$key][1] + $cache[$key][2]) <= $now) {
                        // アイテム自体の ttl を max($ttls) にしているため、原則として↑の $this->>get の時点でフィルタされてこのコードは通らない
                        // ここを通るのはハッシュが衝突してそれぞれの ttl がバラバラの場合のみ
                        // レアすぎてテストできないので ignore する（A(ttl:100) と B(ttl:50) が衝突してその間（75）で B を取得したときに通ることになる）
                        unset($cache[$key]); // @codeCoverageIgnore
                    }
                    // getter モード
                    if ($provider === null && $ttl === null) {
                        return $cache[$key][0] ?? null;
                    }
                    // ttl 0 は psr16 と同様に削除モード
                    if ($ttl !== null && $ttl <= 0) {
                        $result = isset($cache[$key]);
                        unset($cache[$key]);
                        $ttls = array_filter(array_column($cache, 2), fn($v) => $v !== null);
                        $this->set($cacheid, $cache, $ttls ? max($ttls) : null);
                        return $result;
                    }

                    if (!array_key_exists($key, $cache)) {
                        $cache[$key] = [$provider(), $now, $ttl];
                        $ttls = array_filter(array_column($cache, 2), fn($v) => $v !== null);
                        $this->set($cacheid, $cache, $ttls ? max($ttls) : null);
                    }
                    return $cache[$key][0];
                }

                public function clear()
                {
                    $this->entries = [];

                    $files = $this->_getCacheFilenames();
                    return count($files) === count(array_filter(array_map('unlink', $files)));
                }

                public function getMultiple($keys, $default = null)
                {
                    return array_each($keys, function (&$result, $v) use ($default) {
                        $result[$v] = $this->get($v, $default);
                    }, []);
                }

                public function setMultiple($values, $ttl = null)
                {
                    return array_each($values, function (&$result, $v, $k) use ($ttl) {
                        $result = $this->set($k, $v, $ttl) && $result;
                    }, true);
                }

                public function deleteMultiple($keys)
                {
                    return array_each($keys, function (&$result, $v) {
                        $result = $this->delete($v) && $result;
                    }, true);
                }

                public function has($key)
                {
                    return $this->get($key) !== null;
                }
            };

            return !interface_exists(\Psr\SimpleCache\CacheInterface::class) ? $cacheobject : new class($cacheobject) implements \Psr\SimpleCache\CacheInterface {
                public function __construct(private $cacheobject) { }

                // @formatter:off
                public function clean($max_execution_time = null)                { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function keys($pattern = null): iterable                  { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function fetch($key, $provider, $ttl = null): mixed       { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function fetchMultiple($providers, $ttl = null): iterable { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function get($key, $default = null): mixed                { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function set($key, $value, $ttl = null): bool             { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function delete($key): bool                               { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function provide($provider, ...$args): mixed              { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function hash($key, $provider, $ttl = null): mixed        { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function clear(): bool                                    { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function getMultiple($keys, $default = null): iterable    { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function setMultiple($values, $ttl = null): bool          { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function deleteMultiple($keys): bool                      { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                public function has($key): bool                                  { return $this->cacheobject->{__FUNCTION__}(...func_get_args()); }
                // @formatter:on
            };
        })($directory);

        static $cleaned = [];
        if ($clean_probability !== 0 && !($cleaned[$directory] ?? false)) {
            $cleaned[$directory] = true;
            if ($clean_probability * 100 >= rand(1, 100)) {
                $cacheobject->clean($clean_execution_time);
            }
        }

        /** @noinspection PhpIncompatibleReturnTypeInspection */
        return $cacheobject;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\function_configure') || (new \ReflectionFunction('ryunosuke\\chmonos\\function_configure'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\function_configure')) {
    /**
     * 本ライブラリの設定を行う
     *
     * 各関数の挙動を変えたり、デフォルトオプションを設定できる。
     *
     * @package ryunosuke\Functions\Package\utility
     *
     * @param array|?string $option 設定。文字列指定時はその値を返す
     * @return array|string 設定値
     */
    function function_configure($option)
    {
        static $config = [];

        // default
        $config['cachedir'] ??= sys_get_temp_dir() . DIRECTORY_SEPARATOR . 'rf' . DIRECTORY_SEPARATOR . strtr(__NAMESPACE__, ['\\' => '%']);
        $config['storagedir'] ??= DIRECTORY_SEPARATOR === '/' ? '/var/tmp/rf/' . strtr(__NAMESPACE__, ['\\' => '%']) : (getenv('ALLUSERSPROFILE') ?: sys_get_temp_dir()) . '\\rf\\' . strtr(__NAMESPACE__, ['\\' => '%']);
        $config['placeholder'] ??= '';
        $config['var_stream'] ??= 'VarStreamV010000';
        $config['memory_stream'] ??= 'MemoryStreamV010000';
        $config['array.variant'] ??= false;
        $config['chain.version'] ??= 2;
        $config['chain.nullsafe'] ??= false;
        $config['process.autoload'] ??= [];
        $config['datetime.class'] ??= \DateTimeImmutable::class;

        // setting
        if (is_array($option)) {
            foreach ($option as $name => $entry) {
                $option[$name] = $config[$name] ?? null;
                switch ($name) {
                    default:
                        $config[$name] = $entry;
                        break;
                    case 'cachedir':
                    case 'storagedir':
                        $entry ??= $config[$name];
                        if (!file_exists($entry)) {
                            @mkdir($entry, 0777 & (~umask()), true);
                        }
                        $config[$name] = realpath($entry);
                        break;
                    case 'placeholder':
                        if (strlen($entry)) {
                            $entry = ltrim($entry[0] === '\\' ? $entry : __NAMESPACE__ . '\\' . $entry, '\\');
                            if (!defined($entry)) {
                                define($entry, tmpfile() ?: [] ?: '' ?: 0.0 ?: null ?: false);
                            }
                            if (!is_resourcable(constant($entry))) {
                                // もしリソースじゃないと一意性が保てず致命的になるので例外を投げる
                                throw new \RuntimeException('placeholder is not resource'); // @codeCoverageIgnore
                            }
                            $config[$name] = $entry;
                        }
                        break;
                }
            }
            return $option;
        }

        // getting
        if ($option === null) {
            return $config;
        }
        if (is_string($option)) {
            switch ($option) {
                default:
                    return $config[$option] ?? null;
                case 'cachedir':
                case 'storagedir':
                    $dirname = $config[$option];
                    if (!file_exists($dirname)) {
                        @mkdir($dirname, 0777 & (~umask()), true); // @codeCoverageIgnore
                    }
                    return realpath($dirname);
            }
        }

        throw new \InvalidArgumentException(sprintf('$option is unknown type(%s)', gettype($option)));
    }
}

assert(!function_exists('ryunosuke\\chmonos\\function_resolve') || (new \ReflectionFunction('ryunosuke\\chmonos\\function_resolve'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\function_resolve')) {
    /**
     * 本ライブラリの関数名を解決する
     *
     * ※ 内部向け
     *
     * @package ryunosuke\Functions\Package\utility
     *
     * @param string $funcname 関数名
     * @return ?string FQSEN 名
     */
    function function_resolve(string $funcname): ?string
    {
        if (false
            // for class
            || (is_callable([__CLASS__, $funcname], false, $result))
            // for namespace
            || (is_callable(__NAMESPACE__ . "\\$funcname", false, $result))
            // for global
            || (is_callable($funcname, false, $result))
        ) {
            return $result;
        }
        return null;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\arrayval') || (new \ReflectionFunction('ryunosuke\\chmonos\\arrayval'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\arrayval')) {
    /**
     * array キャストの関数版
     *
     * intval とか strval とかの array 版。
     * ただキャストするだけだが、関数なのでコールバックとして使える。
     *
     * $recursive を true にすると再帰的に適用する（デフォルト）。
     * 入れ子オブジェクトを配列化するときなどに使える。
     *
     * Example:
     * ```php
     * // キャストなので基本的には配列化される
     * that(arrayval(123))->isSame([123]);
     * that(arrayval('str'))->isSame(['str']);
     * that(arrayval([123]))->isSame([123]); // 配列は配列のまま
     *
     * // $recursive = false にしない限り再帰的に適用される
     * $stdclass = (object) ['key' => 'val'];
     * that(arrayval([$stdclass], true))->isSame([['key' => 'val']]); // true なので中身も配列化される
     * that(arrayval([$stdclass], false))->isSame([$stdclass]);       // false なので中身は変わらない
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var array 化する値
     * @param bool $recursive 再帰的に行うなら true
     * @return array array 化した配列
     */
    function arrayval($var, $recursive = true)
    {
        // return json_decode(json_encode($var), true);

        // 無駄なループを回したくないので非再帰で配列の場合はそのまま返す
        if (!$recursive && is_array($var)) {
            return $var;
        }

        if (is_primitive($var)) {
            return (array) $var;
        }

        $result = [];
        foreach ($var as $k => $v) {
            if ($recursive && !is_primitive($v)) {
                $v = arrayval($v, $recursive);
            }
            $result[$k] = $v;
        }
        return $result;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\attr_exists') || (new \ReflectionFunction('ryunosuke\\chmonos\\attr_exists'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\attr_exists')) {
    /**
     * 配列・オブジェクトを問わずキーやプロパティの存在を確認する
     *
     * 配列が与えられた場合は array_key_exists と同じ。
     * オブジェクトは一旦 isset で確認した後 null の場合は実際にアクセスして試みる。
     *
     * Example:
     * ```php
     * $array = [
     *     'k' => 'v',
     *     'n' => null,
     * ];
     * // 配列は array_key_exists と同じ
     * that(attr_exists('k', $array))->isTrue();  // もちろん存在する
     * that(attr_exists('n', $array))->isTrue();  // isset ではないので null も true
     * that(attr_exists('x', $array))->isFalse(); // 存在しないので false
     *
     * $object = (object) $array;
     * // オブジェクトでも使える
     * that(attr_exists('k', $object))->isTrue();  // もちろん存在する
     * that(attr_exists('n', $object))->isTrue();  // isset ではないので null も true
     * that(attr_exists('x', $object))->isFalse(); // 存在しないので false
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param int|string $key 調べるキー
     * @param array|object $value 調べられる配列・オブジェクト
     * @return bool $key が存在するなら true
     */
    function attr_exists($key, $value)
    {
        return attr_get($key, $value, $dummy = new \stdClass()) !== $dummy;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\attr_get') || (new \ReflectionFunction('ryunosuke\\chmonos\\attr_get'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\attr_get')) {
    /**
     * 配列・オブジェクトを問わずキーやプロパティの値を取得する
     *
     * 配列が与えられた場合は array_key_exists でチェック。
     * オブジェクトは一旦 isset で確認した後 null の場合は実際にアクセスして取得する。
     *
     * Example:
     * ```php
     * $array = [
     *     'k' => 'v',
     *     'n' => null,
     * ];
     * that(attr_get('k', $array))->isSame('v');                  // もちろん存在する
     * that(attr_get('n', $array))->isSame(null);                 // isset ではないので null も true
     * that(attr_get('x', $array, 'default'))->isSame('default'); // 存在しないのでデフォルト値
     *
     * $object = (object) $array;
     * // オブジェクトでも使える
     * that(attr_get('k', $object))->isSame('v');                  // もちろん存在する
     * that(attr_get('n', $object))->isSame(null);                 // isset ではないので null も true
     * that(attr_get('x', $object, 'default'))->isSame('default'); // 存在しないのでデフォルト値
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param int|string $key 取得するキー
     * @param array|object $value 取得される配列・オブジェクト
     * @param mixed $default なかった場合のデフォルト値
     * @return mixed $key の値
     */
    function attr_get($key, $value, $default = null)
    {
        if (is_array($value)) {
            return array_key_exists($key, $value) ? $value[$key] : $default;
        }

        if ($value instanceof \ArrayAccess) {
            // あるならあるでよい
            if (isset($value[$key])) {
                return $value[$key];
            }
            // 問題は「ない場合」と「あるが null だった場合」の区別で、ArrayAccess の実装次第なので一元的に確定するのは不可能
            // ここでは「ない場合はなんらかのエラー・例外が出るはず」という前提で実際に値を取得して確認する
            try {
                error_clear_last();
                $result = @$value[$key];
                return error_get_last() ? $default : $result;
            }
            catch (\Throwable) {
                return $default;
            }
        }

        // 上記のプロパティ版
        if (is_object($value)) {
            try {
                if (isset($value->$key)) {
                    return $value->$key;
                }
                error_clear_last();
                $result = @$value->$key;
                return error_get_last() ? $default : $result;
            }
            catch (\Throwable) {
                return $default;
            }
        }

        throw new \InvalidArgumentException(sprintf('%s must be array or object (%s).', '$value', var_type($value)));
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_arrayable') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_arrayable'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_arrayable')) {
    /**
     * 変数が配列アクセス可能か調べる
     *
     * Example:
     * ```php
     * that(is_arrayable([]))->isTrue();
     * that(is_arrayable(new \ArrayObject()))->isTrue();
     * that(is_arrayable(new \stdClass()))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 調べる値
     * @return bool 配列アクセス可能なら true
     */
    function is_arrayable($var)
    {
        return is_array($var) || $var instanceof \ArrayAccess;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_empty') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_empty'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_empty')) {
    /**
     * 値が空か検査する
     *
     * `empty` とほぼ同じ。ただし
     *
     * - string: "0"
     * - countable でない object
     * - countable である object で count() > 0
     *
     * は false 判定する。
     * ただし、 $empty_stcClass に true を指定すると「フィールドのない stdClass」も true を返すようになる。
     * これは stdClass の立ち位置はかなり特殊で「フィールドアクセスできる組み込み配列」のような扱いをされることが多いため。
     * （例えば `json_decode('{}')` は stdClass を返すが、このような状況は空判定したいことが多いだろう）。
     *
     * なお、関数の仕様上、未定義変数を true 判定することはできない。
     * 未定義変数をチェックしたい状況は大抵の場合コードが悪いが `$array['key1']['key2']` を調べたいことはある。
     * そういう時には使えない（?? する必要がある）。
     *
     * 「 `if ($var) {}` で十分なんだけど "0" が…」という状況はまれによくあるはず。
     *
     * Example:
     * ```php
     * // この辺は empty と全く同じ
     * that(is_empty(null))->isTrue();
     * that(is_empty(false))->isTrue();
     * that(is_empty(0))->isTrue();
     * that(is_empty(''))->isTrue();
     * // この辺だけが異なる
     * that(is_empty('0'))->isFalse();
     * // 第2引数に true を渡すと空の stdClass も empty 判定される
     * $stdclass = new \stdClass();
     * that(is_empty($stdclass, true))->isTrue();
     * // フィールドがあれば empty ではない
     * $stdclass->hoge = 123;
     * that(is_empty($stdclass, true))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 判定する値
     * @param bool $empty_stdClass 空の stdClass を空とみなすか
     * @return bool 空なら true
     */
    function is_empty($var, $empty_stdClass = false)
    {
        // object は is_countable 次第
        if (is_object($var)) {
            // が、 stdClass だけは特別扱い（stdClass は継承もできるので、クラス名で判定する（継承していたらそれはもう stdClass ではないと思う））
            if ($empty_stdClass && get_class($var) === 'stdClass') {
                return !(array) $var;
            }
            if (is_countable($var)) {
                return !count($var);
            }
            return false;
        }

        // "0" は false
        if ($var === '0') {
            return false;
        }

        // 上記以外は empty に任せる
        return empty($var);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_exportable') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_exportable'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_exportable')) {
    /**
     * 値が var_export で出力可能か検査する
     *
     * 「出力可能」とは「意味のある出力」を意味する。
     * 例えば set_state のないオブジェクトはエラーなく set_state コール形式で出力されるが意味のある出力ではない。
     * リソース型はエラーなく NULL で出力されるが意味のある出力ではない。
     * 循環参照は出力できるものの warning が出てかつ循環は切れるため意味のある出力ではない。
     *
     * Example:
     * ```php
     * that(is_primitive(null))->isTrue();
     * that(is_primitive(false))->isTrue();
     * that(is_primitive(123))->isTrue();
     * that(is_primitive(STDIN))->isTrue();
     * that(is_primitive(new \stdClass))->isFalse();
     * that(is_primitive(['array']))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 調べる値
     * @return bool 出力可能なら true
     */
    function is_exportable($var): bool
    {
        // スカラー/NULL は OK
        if (is_scalar($var) || is_null($var)) {
            return true;
        }

        // リソース型の変数は、この関数ではエクスポートする事ができません
        if (is_resourcable($var)) {
            return false;
        }

        // var_export() では循環参照を扱うことができません
        if (is_recursive($var)) {
            return false;
        }

        // 配列に制限はない。それゆえに全要素を再帰的に見なければならない
        if (is_array($var)) {
            foreach ($var as $v) {
                if (!is_exportable($v)) {
                    return false;
                }
            }
            return true;
        }

        if (is_object($var)) {
            // 無名クラスは非常に特殊で、出力は class@anonymous{filename}:123$456::__set_state(...) のようになる
            // set_state さえ実装してれば復元可能に思えるが php コードとして不正なのでそのまま実行するとシンタックスエラーになる
            // 'class@anonymous{filename}:123$456'::__set_state(...) のようにクオートすれば実行可能になるが、それは標準 var_export の動作ではない
            // 復元する側がクオートして読み込み…とすれば復元可能だが、そもそもクラスがロードされている保証もない
            // これらのことを考慮するなら「意味のある出力」ではないとみなした方が手っ取り早い
            if ((new \ReflectionClass($var))->isAnonymous()) {
                return false;
            }
            // var_export() が生成する PHP を評価できるようにするためには、処理対象のすべてのオブジェクトがマジックメソッド __set_state を実装している必要があります
            if (method_exists($var, '__set_state')) {
                return true;
            }
            // これの唯一の例外は stdClass です。 stdClass は、配列をオブジェクトにキャストした形でエクスポートされます
            if (get_class($var) === \stdClass::class) {
                return true;
            }
            // マニュアルに記載はないが enum は export できる
            if ($var instanceof \UnitEnum) {
                return true;
            }
            return false;
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_primitive') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_primitive'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_primitive')) {
    /**
     * 値が複合型でないか検査する
     *
     * 「複合型」とはオブジェクトと配列のこと。
     * つまり
     *
     * - is_scalar($var) || is_null($var) || is_resource($var)
     *
     * と同義（!is_array($var) && !is_object($var) とも言える）。
     *
     * Example:
     * ```php
     * that(is_primitive(null))->isTrue();
     * that(is_primitive(false))->isTrue();
     * that(is_primitive(123))->isTrue();
     * that(is_primitive(STDIN))->isTrue();
     * that(is_primitive(new \stdClass))->isFalse();
     * that(is_primitive(['array']))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 調べる値
     * @return bool 複合型なら false
     */
    function is_primitive($var)
    {
        return is_scalar($var) || is_null($var) || is_resourcable($var);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_recursive') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_recursive'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_recursive')) {
    /**
     * 変数が再帰参照を含むか調べる
     *
     * Example:
     * ```php
     * // 配列の再帰
     * $array = [];
     * $array['recursive'] = &$array;
     * that(is_recursive($array))->isTrue();
     * // オブジェクトの再帰
     * $object = new \stdClass();
     * $object->recursive = $object;
     * that(is_recursive($object))->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 調べる値
     * @return bool 再帰参照を含むなら true
     */
    function is_recursive($var)
    {
        $core = function ($var, $parents) use (&$core) {
            // 複合型でないなら間違いなく false
            if (is_primitive($var)) {
                return false;
            }

            // 「親と同じ子」は再帰以外あり得ない。よって === で良い（オブジェクトに関してはそもそも等値比較で絶対に一致しない）
            // sql_object_hash とか serialize でキーに保持して isset の方が速いか？
            // → ベンチ取ったところ in_array の方が10倍くらい速い。多分生成コストに起因
            // raw な比較であれば瞬時に比較できるが、isset だと文字列化が必要でかなり無駄が生じていると考えられる
            foreach ($parents as $parent) {
                if ($parent === $var) {
                    return true;
                }
            }

            // 全要素を再帰的にチェック
            $parents[] = $var;
            foreach ($var as $v) {
                if ($core($v, $parents)) {
                    return true;
                }
            }
            return false;
        };
        return $core($var, []);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_resourcable') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_resourcable'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_resourcable')) {
    /**
     * 閉じたリソースでも true を返す is_resource
     *
     * マニュアル（ https://www.php.net/manual/ja/function.is-resource.php ）に記載の通り、 isresource は閉じたリソースで false を返す。
     * リソースはリソースであり、それでは不便なこともあるので、閉じていようとリソースなら true を返す関数。
     *
     * Example:
     * ```php
     * // 閉じたリソースを用意
     * $resource = tmpfile();
     * fclose($resource);
     * // is_resource は false を返すが・・・
     * that(is_resource($resource))->isFalse();
     * // is_resourcable は true を返す
     * that(is_resourcable($resource))->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 調べる値
     * @return bool リソースなら true
     */
    function is_resourcable($var)
    {
        if (is_resource($var)) {
            return true;
        }
        // もっといい方法があるかもしれないが、簡単に調査したところ gettype するしか術がないような気がする
        if (strpos(gettype($var), 'resource') === 0) {
            return true;
        }
        return false;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\is_stringable') || (new \ReflectionFunction('ryunosuke\\chmonos\\is_stringable'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\is_stringable')) {
    /**
     * 変数が文字列化できるか調べる
     *
     * 「配列」「__toString を持たないオブジェクト」が false になる。
     * （厳密に言えば配列は "Array" になるので文字列化できるといえるがここでは考えない）。
     *
     * Example:
     * ```php
     * // こいつらは true
     * that(is_stringable(null))->isTrue();
     * that(is_stringable(true))->isTrue();
     * that(is_stringable(3.14))->isTrue();
     * that(is_stringable(STDOUT))->isTrue();
     * that(is_stringable(new \Exception()))->isTrue();
     * // こいつらは false
     * that(is_stringable(new \ArrayObject()))->isFalse();
     * that(is_stringable([1, 2, 3]))->isFalse();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 調べる値
     * @return bool 文字列化できるなら true
     */
    function is_stringable($var)
    {
        if (is_array($var)) {
            return false;
        }
        if (is_object($var) && !method_exists($var, '__toString')) {
            return false;
        }
        return true;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\numval') || (new \ReflectionFunction('ryunosuke\\chmonos\\numval'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\numval')) {
    /**
     * 値を数値化する
     *
     * int か float ならそのまま返す。
     * 文字列の場合、一言で言えば「.を含むなら float、含まないなら int」を返す。
     * int でも float でも stringable でもない場合は実装依存（ただの int キャスト）。
     *
     * Example:
     * ```php
     * that(numval(3.14))->isSame(3.14);   // int や float はそのまま返す
     * that(numval('3.14'))->isSame(3.14); // . を含む文字列は float を返す
     * that(numval('11', 8))->isSame(9);   // 基数が指定できる
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 数値化する値
     * @param int $base 基数。int 的な値のときしか意味をなさない
     * @return int|float 数値化した値
     */
    function numval($var, $base = 10)
    {
        if (is_int($var) || is_float($var)) {
            return $var;
        }
        if (is_object($var)) {
            $var = (string) $var;
        }
        if (is_string($var) && strpos($var, '.') !== false) {
            return (float) $var;
        }
        return intval($var, $base);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\phpval') || (new \ReflectionFunction('ryunosuke\\chmonos\\phpval'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\phpval')) {
    /**
     * 文字列を php の式として評価して値を返す
     *
     * 実質的には `eval("return $var;")` とほぼ同義。
     * ただ、 eval するまでもない式はそのまま返し、bare な文字列はそのまま文字列として返す（7.2 以前の未定義定数のような動作）。
     *
     * Example:
     * ```php
     * that(phpval('strtoupper($var)', ['var' => 'string']))->isSame('STRING');
     * that(phpval('bare string'))->isSame('bare string');
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 評価する式
     * @param array $contextvars eval される場合のローカル変数
     * @return mixed 評価した値
     */
    function phpval($var, $contextvars = [])
    {
        if (!is_string($var)) {
            return $var;
        }

        if (defined($var)) {
            return constant($var);
        }
        if (ctype_digit(ltrim($var, '+-'))) {
            return (int) $var;
        }
        if (is_numeric($var)) {
            return (double) $var;
        }

        set_error_handler(function () { });
        try {
            return evaluate("return $var;", $contextvars);
        }
        catch (\Throwable) {
            return $var;
        }
        finally {
            restore_error_handler();
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\si_unprefix') || (new \ReflectionFunction('ryunosuke\\chmonos\\si_unprefix'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\si_unprefix')) {
    /**
     * SI 接頭辞が付与された文字列を数値化する
     *
     * 典型的な用途は ini_get で得られた値を数値化したいとき。
     * ただし、 ini は 1m のように小文字で指定することもあるので大文字化する必要はある。
     *
     * Example:
     * ```php
     * // 1k = 1000
     * that(si_unprefix('1k'))->isSame(1000);
     * // 1k = 1024
     * that(si_unprefix('1k', 1024))->isSame(1024);
     * // m はメガではなくミリ
     * that(si_unprefix('1m'))->isSame(0.001);
     * // M がメガ
     * that(si_unprefix('1M'))->isSame(1000000);
     * // K だけは特別扱いで大文字小文字のどちらでもキロになる
     * that(si_unprefix('1K'))->isSame(1000);
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 数値化する値
     * @param int $unit 桁単位。実用上は 1000, 1024 の2値しか指定することはないはず
     * @return int|float SI 接頭辞を取り払った実際の数値
     */
    function si_unprefix($var, $unit = 1000, $format = '%d%s')
    {
        assert($unit > 0);

        $var = trim($var);
        $num = numval($var);

        foreach (SI_UNITS as $exp => $sis) {
            foreach ($sis as $si) {
                if (sprintf($format, $num, $si) === $var) {
                    return $num * pow($unit, $exp);
                }
            }
        }

        return $num;
    }
}

assert(!function_exists('ryunosuke\\chmonos\\stringify') || (new \ReflectionFunction('ryunosuke\\chmonos\\stringify'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\stringify')) {
    /**
     * 値を何とかして文字列化する
     *
     * この関数の出力は互換性を考慮しない。頻繁に変更される可能性がある。
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var 文字列化する値
     * @return string $var を文字列化したもの
     */
    function stringify($var)
    {
        $type = gettype($var);
        switch ($type) {
            case 'NULL':
                return 'null';
            case 'boolean':
                return $var ? 'true' : 'false';
            case 'array':
                return var_export2($var, true);
            case 'object':
                if (method_exists($var, '__toString')) {
                    return (string) $var;
                }
                if (method_exists($var, '__serialize') || $var instanceof \Serializable) {
                    return serialize($var);
                }
                if ($var instanceof \JsonSerializable) {
                    return get_class($var) . ':' . json_encode($var, JSON_UNESCAPED_UNICODE);
                }
                return get_class($var);

            default:
                return (string) $var;
        }
    }
}

assert(!function_exists('ryunosuke\\chmonos\\var_export2') || (new \ReflectionFunction('ryunosuke\\chmonos\\var_export2'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\var_export2')) {
    /**
     * 組み込みの var_export をいい感じにしたもの
     *
     * 下記の点が異なる。
     *
     * - 配列は 5.4 以降のショートシンタックス（[]）で出力
     * - ただの配列は1行（[1, 2, 3]）でケツカンマなし、連想配列は桁合わせインデントでケツカンマあり
     * - 文字列はダブルクオート
     * - null は null（小文字）
     * - 再帰構造を渡しても警告がでない（さらに NULL ではなく `'*RECURSION*'` という文字列になる）
     * - 配列の再帰構造の出力が異なる（Example参照）
     *
     * Example:
     * ```php
     * // 単純なエクスポート
     * that(var_export2(['array' => [1, 2, 3], 'hash' => ['a' => 'A', 'b' => 'B', 'c' => 'C']], true))->isSame('[
     *     "array" => [1, 2, 3],
     *     "hash"  => [
     *         "a" => "A",
     *         "b" => "B",
     *         "c" => "C",
     *     ],
     * ]');
     * // 再帰構造を含むエクスポート（標準の var_export は形式が異なる。 var_export すれば分かる）
     * $rarray = [];
     * $rarray['a']['b']['c'] = &$rarray;
     * $robject = new \stdClass();
     * $robject->a = new \stdClass();
     * $robject->a->b = new \stdClass();
     * $robject->a->b->c = $robject;
     * that(var_export2(compact('rarray', 'robject'), true))->isSame('[
     *     "rarray"  => [
     *         "a" => [
     *             "b" => [
     *                 "c" => "*RECURSION*",
     *             ],
     *         ],
     *     ],
     *     "robject" => (object) [
     *         "a" => (object) [
     *             "b" => (object) [
     *                 "c" => "*RECURSION*",
     *             ],
     *         ],
     *     ],
     * ]');
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $value 出力する値
     * @param bool|array $options オプション配列（var_export に寄せるため bool も受け付ける）
     * @return string|null $return=true の場合は出力せず結果を返す
     */
    function var_export2($value, $options = [])
    {
        if (!is_array($options)) {
            $options = [
                'return' => !!$options,
            ];
        }

        $options += [
            'minify' => false, // 短縮形で返す（実質的には情報を減らして1行で返す）
            'indent' => 4,     // インデントの空白数
            'return' => false, // 値を戻すか出力するか
        ];

        // 再帰用クロージャ
        $export = function ($value, $context, $nest = 0, $parents = []) use (&$export, $options) {
            // 再帰を検出したら *RECURSION* とする（処理に関しては is_recursive のコメント参照）
            foreach ($parents as $parent) {
                if ($parent === $value) {
                    return $export('*RECURSION*', 'recursion');
                }
            }

            $space = $options['minify'] ? "" : " ";
            $break = $options['minify'] ? "" : "\n";

            // 配列は連想判定したり再帰したり色々
            if (is_array($value)) {
                $spacer1 = str_repeat($space, ($nest + 1) * $options['indent']);
                $spacer2 = str_repeat($space, $nest * $options['indent']);

                $hashed = is_hasharray($value);

                // スカラー値のみで構成されているならシンプルな再帰
                if (!$hashed && array_and($value, fn(...$args) => is_primitive(...$args))) {
                    return '[' . implode(",$space", array_map(fn($v) => $export($v, 'array-value'), $value)) . ']';
                }

                // 連想配列はキーを含めて桁あわせ
                if ($hashed) {
                    $keys = array_map(fn($v) => $export($v, 'array-key'), array_combine($keys = array_keys($value), $keys));
                    $maxlen = max(array_map('strlen', $keys));
                }
                $kvl = '';
                $lastkey = array_key_last($value);
                $parents[] = $value;
                foreach ($value as $k => $v) {
                    $keystr = $hashed ? $keys[$k] . str_repeat($space, $maxlen - strlen($keys[$k])) . "$space=>$space" : '';
                    $kvl .= $spacer1 . $keystr . $export($v, 'array-value', $nest + 1, $parents) . ($k === $lastkey && $options['minify'] ? "" : ",") . "$break";
                }
                return "[$break{$kvl}{$spacer2}]";
            }
            // オブジェクトは単にプロパティを __set_state する文字列を出力する
            elseif (is_object($value)) {
                $parents[] = $value;
                $classname = get_class($value);
                if ($classname === \stdClass::class) {
                    return "(object)$space" . $export((array) $value, 'object', $nest, $parents);
                }
                return $classname . '::__set_state(' . $export(object_properties($value), 'object', $nest, $parents) . ')';
            }
            // 文字列はダブルクオート（場合によってはヒアドキュメント）
            elseif (is_string($value)) {
                // 列揃えのため配列のキーは常にダブルクォート
                if ($context === 'array-key') {
                    return str_quote($value);
                }
                // 改行を含むならヒアドキュメント
                if (!$options['minify'] && str_exists($value, ["\r", "\n"])) {
                    // ただし、改行文字だけの場合は除く（何らかの引数で改行文字だけを渡すシチュエーションはそれなりにあるのでヒアドキュメントだと冗長）
                    if (trim($value, "\r\n") !== '') {
                        return str_quote($value, [
                            'heredoc' => unique_string($value, 'TEXT', '_'),
                            'indent'  => $nest * $options['indent'],
                        ]);
                    }
                }
                return str_quote($value);
            }
            // null は小文字で居て欲しい
            elseif (is_null($value)) {
                return 'null';
            }
            // それ以外は標準に従う
            else {
                return var_export($value, true);
            }
        };

        // 結果を返したり出力したり
        $result = $export($value, null);
        if ($options['return']) {
            return $result;
        }
        echo $result, "\n";
    }
}

assert(!function_exists('ryunosuke\\chmonos\\var_hash') || (new \ReflectionFunction('ryunosuke\\chmonos\\var_hash'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\var_hash')) {
    /**
     * 値に複数のハッシュアルゴリズムを適用させて結合して返す
     *
     * $data は何らかの方法で文字列化される（この「何らかの方法」は互換性を担保しない）。
     * 文字長がかなり増えるため、 $base64 に true を与えるとバイナリ変換してその結果を base64（url セーフ）して返す。
     * さらに false を与えると 16進数文字列で返し、 null を与えるとバイナリ文字列で返す。
     *
     * Example:
     * ```php
     * // 配列をハッシュ化する
     * that(var_hash(['a', 'b', 'c']))->isSame('7BDgx6NE2hkXAKtKzhpeJm6-mheMOQWNgrCe7768OiFeoWgA');
     * // オブジェクトをハッシュ化する
     * that(var_hash(new \ArrayObject(['a', 'b', 'c'])))->isSame('-zR2rZ58CzuYhhdHn1Oq90zkYSaxMS-dHUbmb0MTRM4gBpj2');
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $var ハッシュ化する値
     * @param string[] $algos ハッシュアルゴリズム
     * @param ?bool $base64 結果を base64 化するか
     * @return string ハッシュ文字列
     */
    function var_hash($var, $algos = ['md5', 'sha1'], $base64 = true)
    {
        if (!is_string($var)) {
            $var = serialize($var);
        }

        $algos = arrayize($algos);
        assert($algos);

        $hash = '';
        foreach ($algos as $algo) {
            $hash .= hash($algo, "$var", $base64 !== false);
        }

        if ($base64 !== true) {
            return $hash;
        }

        return base64url_encode($hash);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\var_type') || (new \ReflectionFunction('ryunosuke\\chmonos\\var_type'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\var_type')) {
    /**
     * 値の型を取得する
     *
     * get_debug_type を少しだけ特殊化したもの。
     * 「デバッグ用の型」ではなく「コード化したときに埋め込みやすい型」が主目的。
     *
     * - object の場合は必ず \ が付く
     * - resource の場合はカッコ書き無しで 'resource'
     *
     * 無名クラスの場合は extends, implements の優先順位でその名前を使う。
     * 継承も実装もされていない場合は標準の get_class の結果を返す。
     *
     * phpdoc に true を渡すと array-shape 記法も有効になり下記のようになる。
     *
     * - 連想配列は想起した通り
     * - 連番配列は中身の和集合を取る
     *     - 中身がさらに配列なら再帰的に処理する
     *         - 有り無し混在は null 扱いになる
     * - 無名クラスは親クラス＋インターフェースを取る
     *     - 完全無名クラスは object になる
     *
     * phpdoc:true の場合の結果は互換性を考慮しない。
     *
     * Example:
     * ```php
     * // プリミティブ型は get_debug_type と同義
     * that(var_type(false))->isSame('bool');
     * that(var_type(123))->isSame('int');
     * that(var_type(3.14))->isSame('float');
     * that(var_type([1, 2, 3]))->isSame('array');
     * // リソースはなんでも resource
     * that(var_type(STDOUT))->isSame('resource');
     * // オブジェクトは型名を返す
     * that(var_type(new \stdClass))->isSame('\\stdClass');
     * that(var_type(new \Exception()))->isSame('\\Exception');
     * // 無名クラスは継承元の型名を返す（インターフェース実装だけのときはインターフェース名）
     * that(var_type(new class extends \Exception{}))->isSame('\\Exception');
     * that(var_type(new class implements \JsonSerializable{
     *     public function jsonSerialize(): string { return ''; }
     * }))->isSame('\\JsonSerializable');
     *
     * // phpdoc 形式
     * that(var_type([
     *     'scalar'    => 123,
     *     'lish-hash' => [
     *         ['id' => 1, 'name' => 'a'],
     *         ['id' => 2, 'name' => 'b'],
     *     ],
     *     'nest'      => [
     *         'a' => [
     *             'b' => [
     *                 'c' => ['a', 'b', 'c'],
     *             ],
     *         ],
     *     ],
     * ], ['phpdoc' => true, 'format' => 9]))->is(<<<ARRAYSHAPE
     * array{
     *   "lish-hash": array<array{
     *     id: int,
     *     name: string
     *   }>,
     *   nest: array{
     *     a: array{
     *       b: array{
     *         c: array<string>
     *       }
     *     }
     *   },
     *   scalar: int
     * }
     * ARRAYSHAPE);
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     */
    function var_type(
        /** 型を取得する値 */ mixed $var,
        /** オプション配列 */ array $options = [],
    ): /** 型名 */ string
    {
        $options['phpdoc'] ??= false;                             // phpdoc 形式で書き出すか
        $options['format'] ??= 1;                                 // フォーマットレベル（0:no space, 1:separator only, ...9:pretty）
        $options['is_list'] ??= fn($k, $v, $array) => is_int($k); // 連番配列の判定処理（例えば UUID などを連番として扱いたいことがある）
        $options['is_object'] ??= function ($var) {               // object-shape 記法にするオブジェクトの判定処理
            if (is_object($var)) {
                if ($var instanceof \stdClass) {
                    return true;
                }
                /** @noinspection PhpElementIsNotAvailableInCurrentPhpVersionInspection */
                if (count((new \ReflectionClass($var))->getAttributes(\AllowDynamicProperties::class))) {
                    return true;
                }
            }
            return false;
        };

        $options['nest'] = 0;

        if (is_array($var) || $options['is_object']($var)) {
            if ($options['phpdoc']) {
                $shape = new class($var, $options) {
                    private string $shape;
                    private array  $type     = [];
                    private array  $list     = [];
                    private array  $hash     = [];
                    private array  $object   = [];
                    private bool   $optional = false;
                    private array  $options;

                    private string $result;

                    public function __construct($var, $options)
                    {
                        $this->shape = is_object($var) ? 'object' : 'array';
                        $this->options = $options;

                        if (is_array($var) || $this->options['is_object']($var)) {
                            foreach ($var as $k => $v) {
                                if ($this->options['is_list']($k, $v, $var)) {
                                    $new = new self($v, $this->options);
                                    foreach ($this->list as $n => $old) {
                                        /** @var self $old */
                                        if (type_exists($newtype = (string) $new) && type_exists($oldtype = (string) $old)) {
                                            if (is_subclass_of($newtype, $oldtype)) {
                                                $this->list[$n] = $new;
                                                continue 2;
                                            }
                                            if (is_subclass_of($oldtype, $newtype)) {
                                                continue 2;
                                            }
                                        }

                                        if ($new->list xor $old->list) {
                                            if ($new->list && !$old->list) {
                                                $this->list[$n] = $new;
                                                continue 2;
                                            }
                                            if (!$new->list && $old->list) {
                                                continue 2;
                                            }
                                        }

                                        $flag = false;
                                        foreach (['hash', 'object'] as $property) {
                                            if ($new->$property && $old->$property) {
                                                $flag = true;
                                                $diffs = array_diff_key($new->$property, $old->$property) + array_diff_key($old->$property, $new->$property);

                                                foreach ($diffs as $diff) {
                                                    /** @var self $diff */
                                                    unset($diff->result);
                                                    $diff->optional = true;
                                                }
                                                $old->$property += $diffs;

                                                foreach ($old->$property as $name => $diff) {
                                                    unset($diff->result);
                                                    $diff->type = array_merge($diff->type, $new->$property[$name]?->type ?? []);
                                                    $diff->list = array_merge($diff->list, $new->$property[$name]?->list ?? []);
                                                    $diff->hash = array_merge($diff->hash, $new->$property[$name]?->hash ?? []);
                                                    $diff->object = array_merge($diff->object, $new->$property[$name]?->object ?? []);
                                                }
                                            }
                                        }
                                        if ($flag) {
                                            continue 2;
                                        }
                                    }
                                    $this->list[] = $new;
                                }
                                else {
                                    $new = new self($v, ['nest' => $this->options['nest'] + 1] + $this->options);
                                    if (is_object($var)) {
                                        $type = var_type($var, ['is_object' => fn() => false] + $this->options);
                                        if ($type !== 'object') {
                                            $this->type[] = $type;
                                        }
                                        $this->object[$k] = $new;
                                    }
                                    else {
                                        $this->hash[$k] = $new;
                                    }
                                }
                            }
                        }
                        else {
                            $this->type[] = var_type($var, $this->options);
                        }
                    }

                    public function __toString(): string
                    {
                        return $this->result ??= (function () {
                            $result = [];
                            if ($t = array_filter(array_map('strval', $this->type), 'strlen')) {
                                sort($t);
                                $result[] = $t ? implode('|', array_unique($t)) : "";
                            }
                            if ($t = array_filter(array_map('strval', $this->list), 'strlen')) {
                                sort($t);
                                $result[] = $t ? "array<" . implode('|', array_unique($t)) . ">" : "";
                            }
                            foreach (['hash', 'object'] as $property) {
                                if ($t = array_filter(array_map('strval', $this->$property), 'strlen')) {
                                    $space = $this->options['format'] > 0 ? " " : "";
                                    $break = $this->options['format'] > 1 ? "\n" : "";
                                    $delim = $this->options['format'] > 1 ? $break : $space;
                                    $indent = $this->options['format'] > 1 ? "  " : "";
                                    $indent0 = $this->options['format'] > 1 ? str_repeat($indent, $this->options['nest'] + 0) : "";
                                    $indent1 = $this->options['format'] > 1 ? str_repeat($indent, $this->options['nest'] + 1) : "";

                                    ksort($t);
                                    $keyvalues = array_map(function ($v, $k) use ($property, $indent1, $space) {
                                        if (!preg_match('#^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$#u', $k)) {
                                            $k = str_quote($k);
                                        }
                                        if ($this->$property[$k]->optional ?? false) {
                                            $k = "$k?";
                                        }
                                        return "{$indent1}$k:{$space}$v";
                                    }, $t, array_keys($t));
                                    $result[] = $t ? "{$this->shape}{{$break}" . implode(",{$delim}", $keyvalues) . "{$break}{$indent0}}" : "";
                                }
                            }
                            $result = array_filter($result, 'strlen');
                            return $result ? implode('|', $result) : $this->shape;
                        })();
                    }

                    /** @codeCoverageIgnore */
                    public function __debugInfo(): ?array
                    {
                        return [
                            'type'     => $this->type,
                            'list'     => $this->list,
                            'hash'     => $this->hash,
                            'object'   => $this->object,
                            'optional' => $this->optional,
                        ];
                    }
                };
                //var_pretty($shape);
                return (string) $shape;
            }
        }
        if (is_object($var)) {
            if ($options['phpdoc']) {
                // クロージャだけはどうせ情報量がゼロなので特別扱いにする
                if ($var instanceof \Closure) {
                    $space = $options['format'] > 0 ? " " : "";

                    $ref = new \ReflectionFunction($var);
                    $args = array_map(fn($p) => ($p->getType() ?? "mixed") . ($p->isVariadic() ? '...' : ''), $ref->getParameters());
                    $return = ($ref->getReturnType() ?? 'mixed');
                    $return = is_string($return) || $return instanceof \ReflectionNamedType ? $return : "($return)";
                    return "\\Closure(" . implode(",$space", $args) . "):$space" . reflect_type_resolve($return);
                }

                $types = [];
                $ref = new \ReflectionObject($var);
                if ($ref->isAnonymous()) {
                    $ifs = [];
                    if ($pc = $ref->getParentClass()) {
                        $types[] = $pc->name;
                        $ifs = $pc->getInterfaceNames();
                    }
                    $types = array_merge($types, array_diff($ref->getInterfaceNames(), $ifs));
                }
                else {
                    $types[] = get_class($var);
                }
                if (!$types) {
                    return 'object';
                }
                return implode('|', array_map(fn($v) => "\\" . ltrim($v, '\\'), $types));
            }
            $ref = new \ReflectionObject($var);
            if ($ref->isAnonymous()) {
                if ($pc = $ref->getParentClass()) {
                    return '\\' . $pc->name;
                }
                if ($is = $ref->getInterfaceNames()) {
                    return '\\' . reset($is);
                }
            }
            return '\\' . get_class($var);
        }
        if (is_resourcable($var)) {
            return 'resource';
        }

        return get_debug_type($var);
    }
}

assert(!function_exists('ryunosuke\\chmonos\\varcmp') || (new \ReflectionFunction('ryunosuke\\chmonos\\varcmp'))->isUserDefined());
if (!function_exists('ryunosuke\\chmonos\\varcmp')) {
    /**
     * php7 の `<=>` の関数版
     *
     * 引数で大文字小文字とか自然順とか型モードとかが指定できる。
     * さらに追加で SORT_STRICT という厳密比較フラグを渡すことができる。
     *
     * Example:
     * ```php
     * // 'a' と 'z' なら 'z' の方が大きい
     * that(varcmp('z', 'a') > 0)->isTrue();
     * that(varcmp('a', 'z') < 0)->isTrue();
     * that(varcmp('a', 'a') === 0)->isTrue();
     *
     * // 'a' と 'Z' なら 'a' の方が大きい…が SORT_FLAG_CASE なので 'Z' のほうが大きい
     * that(varcmp('Z', 'a', SORT_FLAG_CASE) > 0)->isTrue();
     * that(varcmp('a', 'Z', SORT_FLAG_CASE) < 0)->isTrue();
     * that(varcmp('a', 'A', SORT_FLAG_CASE) === 0)->isTrue();
     *
     * // '2' と '12' なら '2' の方が大きい…が SORT_NATURAL なので '12' のほうが大きい
     * that(varcmp('12', '2', SORT_NATURAL) > 0)->isTrue();
     * that(varcmp('2', '12', SORT_NATURAL) < 0)->isTrue();
     *
     * // SORT_STRICT 定数が使える（下記はすべて宇宙船演算子を使うと 0 になる）
     * that(varcmp(['a' => 'A', 'b' => 'B'], ['b' => 'B', 'a' => 'A'], SORT_STRICT) < 0)->isTrue();
     * that(varcmp((object) ['a'], (object) ['a'], SORT_STRICT) < 0)->isTrue();
     * ```
     *
     * @package ryunosuke\Functions\Package\var
     *
     * @param mixed $a 比較する値1
     * @param mixed $b 比較する値2
     * @param ?int $mode 比較モード（SORT_XXX）。省略すると型でよしなに選択
     * @param ?int $precision 小数比較の際の誤差桁
     * @return int 等しいなら 0、 $a のほうが大きいなら > 0、 $bのほうが大きいなら < 0
     */
    function varcmp($a, $b, $mode = null, $precision = null)
    {
        // 負数は逆順とみなす
        $reverse = 1;
        if ($mode < 0) {
            $reverse = -1;
            $mode = -$mode;
        }

        // null が来たらよしなにする（なるべく型に寄せるが SORT_REGULAR はキモいので避ける）
        if ($mode === null || $mode === SORT_FLAG_CASE) {
            if ((is_int($a) || is_float($a)) && (is_int($b) || is_float($b))) {
                $mode = SORT_NUMERIC;
            }
            elseif (is_string($a) && is_string($b)) {
                $mode = SORT_STRING | $mode; // SORT_FLAG_CASE が単品で来てるかもしれないので混ぜる
            }
        }

        $flag_case = $mode & SORT_FLAG_CASE;
        $mode = $mode & ~SORT_FLAG_CASE;

        if ($mode === SORT_NUMERIC) {
            $delta = $a - $b;
            if ($precision > 0 && abs($delta) < pow(10, -$precision)) {
                return 0;
            }
            return $reverse * (0 < $delta ? 1 : ($delta < 0 ? -1 : 0));
        }
        if ($mode === SORT_STRING) {
            if ($flag_case) {
                return $reverse * strcasecmp($a, $b);
            }
            return $reverse * strcmp($a, $b);
        }
        if ($mode === SORT_NATURAL) {
            if ($flag_case) {
                return $reverse * strnatcasecmp($a, $b);
            }
            return $reverse * strnatcmp($a, $b);
        }
        if ($mode === SORT_STRICT) {
            return $reverse * ($a === $b ? 0 : ($a > $b ? 1 : -1));
        }

        // for SORT_REGULAR
        return $reverse * ($a == $b ? 0 : ($a > $b ? 1 : -1));
    }
}
